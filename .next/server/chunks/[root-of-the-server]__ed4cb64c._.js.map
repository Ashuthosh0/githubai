{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,sIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"../db\";\nimport { auth } from \"@clerk/nextjs/server\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get type safety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\n\nconst isAuthenticated = t.middleware(async ({ next , ctx}) =>{\n  const user = await auth();\n  if(!user){\n    throw new TRPCError({\n      code : 'UNAUTHORIZED',\n      message : \"You must be logged in to access this response\"\n    })\n  }\n  return next({\n    ctx: {\n      ...ctx,\n      user\n    }\n  })\n})\n\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\nexport const protectedProcedure = t.procedure.use(isAuthenticated);"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AAAA;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,qHAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,kMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,sIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GAED,MAAM,kBAAkB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAG,GAAG,EAAC;IACvD,MAAM,OAAO,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IACtB,IAAG,CAAC,MAAK;QACP,MAAM,IAAI,4MAAA,CAAA,YAAS,CAAC;YAClB,MAAO;YACP,SAAU;QACZ;IACF;IACA,OAAO,KAAK;QACV,KAAK;YACH,GAAG,GAAG;YACN;QACF;IACF;AACF;AAEA,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AACxC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/lib/gemini.ts"],"sourcesContent":["import {GoogleGenerativeAI} from '@google/generative-ai'\r\nimport type { Document } from '@langchain/core/documents'\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API!)\r\nconst model = genAI.getGenerativeModel({\r\n  model : 'gemini-1.5-flash'\r\n})\r\n\r\nexport const aisummarizeCommit = async (diff : string) => {\r\n  const response = await model.generateContent([\r\n    `You are an expert programmer, and you are trying to summarize a git diff.\r\n\r\nReminders about the git diff format:\r\nFor every file, there are a few metadata lines, like (for example):\r\n\\`\\`\\`\r\ndiff --git a/lib/index.js b/lib/index.js\r\nindex aadf691..bfef603 100644\r\n--- a/lib/index.js\r\n+++ b/lib/index.js\r\n\\`\\`\\`\r\nThis means that \\`lib/index.js\\` was modified in this commit. Note that this is only an example.\r\nThen there is a specifier of the lines that were modified.\r\n\r\nA line starting with \\`+\\` means it was added.\r\nA line that starting with \\`-\\` means that line was deleted.\r\nA line that does not start with \\`+\\` nor \\`-\\` is code given for context better understanding.\r\n\r\nIt is not part of the diff.\r\n\r\n[...]\r\n\r\nEXAMPLE SUMMARY COMMENTS:\r\n\\`\\`\\`\r\n* Raised the amount of returned recordings from \\`10\\` to \\`100\\` [packages/server/recordings_api.ts], [packages/server/constants.ts]\r\n* Fixed a typo in the github action name [.github/workflows/gpt-commit-summarizer.yml]\r\n* Moved the \\`octokit\\` initialization to a separate file [src/octokit.ts], [src/index.ts]\r\n* Added an OpenAI API for completions [packages/utils/apis/openai.ts]\r\n* Lowered numeric tolerance for test files\r\n\\`\\`\\`\r\nMost commits will have less comments than this examples list.\r\nThe last comment does not include the file names,\r\nbecause there were more than two relevant files in the hypothetical commit.\r\nDo not include parts of the example in your summary.\r\nIt is given only as an example of appropriate comments.\r\n\r\nPlease summarise the following diff file: \\n\\n${diff},`\r\n  ])\r\n  return response.response.text();\r\n}\r\n\r\nexport async function summariseCode(doc : Document){\r\n  try{ \r\n    console.log(\"getting summary for \" , doc.metadata.source);\r\n    const code = doc.pageContent.slice(0,10000);\r\n    const response = await model.generateContent([\r\n    `You are an intelligent senior software engineer who specializes in onboarding junior software engineers into projects`,\r\n    `You are onboarding a junior software engineer and explaining to them the purpose of the ${doc.metadata.source} file`,\r\n    `here is the code:\r\n    ---\r\n      ${code}\r\n      ---\r\n        Give a summary no more than 100 words of the code above`,\r\n  ]);\r\n\r\n  return response.response.text();\r\n  }\r\n  catch(error){\r\n    console.log(error);\r\n    return \"Unable to generate a summary for this code.\";\r\n  }\r\n}\r\n\r\n\r\nexport async function generateEmbedding(summary : string){\r\n  const model = genAI.getGenerativeModel({\r\n    model : \"text-embedding-004\"\r\n  })\r\n  const result = await model.embedContent(summary)\r\n  const embedding = result.embedding\r\n  return embedding.values;\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;AAAA;;AAGA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,UAAU;AAC3D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IACrC,OAAQ;AACV;AAEO,MAAM,oBAAoB,OAAO;IACtC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;QAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAmCyC,EAAE,KAAK,CAAC,CAAC;KACpD;IACD,OAAO,SAAS,QAAQ,CAAC,IAAI;AAC/B;AAEO,eAAe,cAAc,GAAc;IAChD,IAAG;QACD,QAAQ,GAAG,CAAC,wBAAyB,IAAI,QAAQ,CAAC,MAAM;QACxD,MAAM,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,GAAE;QACrC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;YAC7C,CAAC,qHAAqH,CAAC;YACvH,CAAC,wFAAwF,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;YACrH,CAAC;;MAEC,EAAE,KAAK;;+DAEkD,CAAC;SAC7D;QAED,OAAO,SAAS,QAAQ,CAAC,IAAI;IAC7B,EACA,OAAM,OAAM;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT;AACF;AAGO,eAAe,kBAAkB,OAAgB;IACtD,MAAM,QAAQ,MAAM,kBAAkB,CAAC;QACrC,OAAQ;IACV;IACA,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC;IACxC,MAAM,YAAY,OAAO,SAAS;IAClC,OAAO,UAAU,MAAM;AAEzB","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/lib/github.ts"],"sourcesContent":["import { db } from \"@/server/db\";\r\nimport { Octokit } from \"octokit\";\r\nimport axios from \"axios\";\r\nimport { aisummarizeCommit } from \"./gemini\";\r\n\r\n\r\nexport const octokit = new Octokit({\r\n  auth : process.env.GITHUB_TOKEN,\r\n})\r\n\r\nconst githubUrl = \"https://github.com/Ashuthosh0/abap-LLM\"\r\n\r\ntype Response ={\r\n  commitHash : string;\r\n  commitMessage :string ;\r\n  commitAuthorAvatar : string;\r\n  commitAuthorName : string;\r\n  commitDate : string;\r\n}\r\n\r\nexport const getCommitHashes = async (githubUrl : string): Promise<Response[]> => {\r\n  const [owner , repo] = githubUrl.split('/').slice(-2)\r\n  if(!owner || !repo){\r\n    throw new Error(\"Invalid github url\")\r\n  }\r\n  const {data} = await octokit.rest.repos.listCommits({\r\n    owner ,\r\n    repo\r\n  })\r\n  const sortedCommits = data.sort((a:any ,b:any) => new Date(b.commit.author.date).getTime() - new Date(a.commit.author.date).getTime()) as any[]\r\n\r\n  return sortedCommits.slice(0,15).map((commit : any) =>({\r\n    commitHash : commit.sha as string,\r\n    commitAuthorName : commit.commit?.author?.name ?? \"\",\r\n    commitMessage :commit.commit.message ?? \"\",\r\n    commitAuthorAvatar : commit?.author?.avatar_url ?? \"\",\r\n    commitDate : commit.commit?.author?.date ?? \"\"\r\n  }))\r\n}\r\n\r\nexport const pollCommits = async (projectId : string) =>{\r\n  const {project , githubUrl} = await fetchProjectGithubUrl(projectId)\r\n\r\n  const commitHashes = await getCommitHashes(githubUrl)\r\n  const unprocessedCommits = await filterUnprocessedCommits(projectId , commitHashes)\r\n  const summaryResponses = await Promise.allSettled(unprocessedCommits.map(commit =>{\r\n    return summarizeCommit(githubUrl , commit.commitHash)\r\n  }))\r\n  const summaries = summaryResponses.map((Responses) =>{\r\n    if(Responses.status ===\"fulfilled\"){\r\n      return Responses.value as string\r\n    }\r\n    return \"\"\r\n  })\r\n  const commit = await db.commit.createMany({\r\n    data: summaries.map((summary , index)=>{\r\n      console.log(`processing commit ${index}`)\r\n      return {\r\n        projectId : projectId,\r\n        commitHash : unprocessedCommits[index]!.commitHash,\r\n        commitMessage : unprocessedCommits[index]!.commitMessage,\r\n        commitAuthorName : unprocessedCommits[index]!.commitAuthorName,\r\n        commitAuthorAvatar : unprocessedCommits[index]!.commitAuthorAvatar,\r\n        commitDate : unprocessedCommits[index]!.commitDate,\r\n        summary\r\n      }\r\n    })\r\n  })\r\n  return unprocessedCommits\r\n}\r\n\r\n\r\nasync function fetchProjectGithubUrl(projectId : string){\r\n  const project = await db.project.findUnique({\r\n    where : {id :projectId},\r\n    select : {\r\n      githubUrl : true\r\n    }\r\n  })\r\n  if(!project?.githubUrl){\r\n    throw new Error(\"Project has no github url\")\r\n  }\r\n  return { project , githubUrl : project.githubUrl}\r\n}\r\n\r\nasync function filterUnprocessedCommits(projectId : string , commitHashes : Response[]) {\r\n  const processedCommits = await db.commit.findMany({\r\n    where : {projectId}\r\n  }) as any[]\r\n  const unprocessedCommits = commitHashes.filter((commit) => !processedCommits.some((processedCommit) => processedCommit.commitHash === commit.commitHash))\r\n  return unprocessedCommits\r\n}\r\n\r\n\r\nasync function summarizeCommit (githubUrl : string ,commitHash : string ){\r\n  const {data} = await axios.get(`${githubUrl}/commit/${commitHash}.diff`,{\r\n    headers : {\r\n      Accept : 'application/vnd.github.v3.diff'\r\n    }\r\n  }\r\n  )\r\n  return await aisummarizeCommit((data) || \"\")\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/lib/github-loader.ts"],"sourcesContent":["import {GithubRepoLoader} from '@langchain/community/document_loaders/web/github'\r\nimport { generateEmbedding, summariseCode } from './gemini';\r\nimport type { Document } from '@langchain/core/documents';\r\nimport { all } from 'axios';\r\nimport { db } from '@/server/db';\r\n\r\nexport const loadGithubRepo = async (githubUrl : string , githubToken?:string) => {\r\n  const loader = new GithubRepoLoader(githubUrl , {\r\n    accessToken : githubToken || '',\r\n    branch : 'main',\r\n    ignoreFiles: [\r\n          // Package manager lock files\r\n          'package-lock.json',\r\n          'yarn.lock',\r\n          'pnpm-lock.yaml',\r\n          'bun.lockb',\r\n\r\n          // Node modules folder\r\n          'node_modules/',\r\n\r\n          // Build output folders\r\n          'dist/',\r\n          'build/',\r\n          'out/',\r\n          'coverage/',\r\n\r\n          // Environment files\r\n          '.env',\r\n          '.env.local',\r\n          '.env.development',\r\n          '.env.test',\r\n          '.env.production',\r\n\r\n          // Logs\r\n          'npm-debug.log',\r\n          'yarn-debug.log',\r\n          'yarn-error.log',\r\n\r\n          // OS-specific files\r\n          '.DS_Store',\r\n          'Thumbs.db',\r\n\r\n          // Editor directories and files\r\n          '.vscode/',\r\n          '.idea/',\r\n          '*.suo',\r\n          '*.ntvs*',\r\n          '*.njsproj',\r\n          '*.sln',\r\n          '*.swp',\r\n          \r\n          // Temporary files\r\n          '*.tmp',\r\n          '*.temp',\r\n          '*.bak',\r\n          '*.backup',\r\n\r\n          // Misc\r\n          '.cache/',\r\n          '.parcel-cache/',\r\n          '.next/',\r\n          '.nuxt/',\r\n        ],\r\n      recursive : true,\r\n      unknown : 'warn',\r\n      maxConcurrency : 5\r\n    })\r\n    const docs = await loader.load();\r\n    return docs;\r\n}\r\n\r\n\r\nexport const indexGithubRepo = async(projectId :string , githubUrl : string , githubToken? : string) => {\r\n  const docs = await loadGithubRepo(githubUrl , githubToken)\r\n  console.log(docs)\r\n  const allEmbeddings = await generateEmbeddings(docs);\r\n  await Promise.allSettled(allEmbeddings.map(async (embedding , index) =>{\r\n    console.log(`processing ${index} of ${allEmbeddings.length}`)\r\n    if(!embedding) return \r\n    const sourceCodeEmbedding = await db.sourceCodeEmbedding.create({\r\n      data:{\r\n        summary : embedding.summary,\r\n        sourceCode : embedding.sourceCode,\r\n        fileName : embedding.filename,\r\n        projectId,\r\n      }\r\n    })\r\n    await db.$executeRaw`\r\n    UPDATE \"SourceCodeEmbedding\"\r\n    SET \"summaryEmbedding\" = ${embedding.embedding} :: vector\r\n    WHERE \"id\" = ${sourceCodeEmbedding.id}\r\n    `\r\n  }))\r\n\r\n}\r\n\r\nconst generateEmbeddings = async (docs :Document[]) => {\r\n  return await Promise.all(docs.map(async doc =>{\r\n    const summary = await summariseCode(doc)\r\n    const embedding = await generateEmbedding(summary)\r\n    return {\r\n      summary,\r\n      embedding,\r\n      sourceCode :JSON.parse(JSON.stringify(doc.pageContent)),\r\n      filename : doc.metadata.source,\r\n    }\r\n\r\n  }))\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAGA;;;;AAEO,MAAM,iBAAiB,OAAO,WAAqB;IACxD,MAAM,SAAS,IAAI,uLAAA,CAAA,mBAAgB,CAAC,WAAY;QAC9C,aAAc,eAAe;QAC7B,QAAS;QACT,aAAa;YACP,6BAA6B;YAC7B;YACA;YACA;YACA;YAEA,sBAAsB;YACtB;YAEA,uBAAuB;YACvB;YACA;YACA;YACA;YAEA,oBAAoB;YACpB;YACA;YACA;YACA;YACA;YAEA,OAAO;YACP;YACA;YACA;YAEA,oBAAoB;YACpB;YACA;YAEA,+BAA+B;YAC/B;YACA;YACA;YACA;YACA;YACA;YACA;YAEA,kBAAkB;YAClB;YACA;YACA;YACA;YAEA,OAAO;YACP;YACA;YACA;YACA;SACD;QACH,WAAY;QACZ,SAAU;QACV,gBAAiB;IACnB;IACA,MAAM,OAAO,MAAM,OAAO,IAAI;IAC9B,OAAO;AACX;AAGO,MAAM,kBAAkB,OAAM,WAAoB,WAAqB;IAC5E,MAAM,OAAO,MAAM,eAAe,WAAY;IAC9C,QAAQ,GAAG,CAAC;IACZ,MAAM,gBAAgB,MAAM,mBAAmB;IAC/C,MAAM,QAAQ,UAAU,CAAC,cAAc,GAAG,CAAC,OAAO,WAAY;QAC5D,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM,IAAI,EAAE,cAAc,MAAM,EAAE;QAC5D,IAAG,CAAC,WAAW;QACf,MAAM,sBAAsB,MAAM,qHAAA,CAAA,KAAE,CAAC,mBAAmB,CAAC,MAAM,CAAC;YAC9D,MAAK;gBACH,SAAU,UAAU,OAAO;gBAC3B,YAAa,UAAU,UAAU;gBACjC,UAAW,UAAU,QAAQ;gBAC7B;YACF;QACF;QACA,MAAM,qHAAA,CAAA,KAAE,CAAC,WAAW,CAAC;;6BAEI,EAAE,UAAU,SAAS,CAAC;iBAClC,EAAE,oBAAoB,EAAE,CAAC;IACtC,CAAC;IACH;AAEF;AAEA,MAAM,qBAAqB,OAAO;IAChC,OAAO,MAAM,QAAQ,GAAG,CAAC,KAAK,GAAG,CAAC,OAAM;QACtC,MAAM,UAAU,MAAM,CAAA,GAAA,sHAAA,CAAA,gBAAa,AAAD,EAAE;QACpC,MAAM,YAAY,MAAM,CAAA,GAAA,sHAAA,CAAA,oBAAiB,AAAD,EAAE;QAC1C,OAAO;YACL;YACA;YACA,YAAY,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,WAAW;YACrD,UAAW,IAAI,QAAQ,CAAC,MAAM;QAChC;IAEF;AACF","debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/api/routers/project.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\nimport { pollCommits } from \"@/lib/github\";\r\nimport { indexGithubRepo } from \"@/lib/github-loader\";\r\n\r\nexport const projectRouter = createTRPCRouter({\r\n  createProject : protectedProcedure.input(\r\n    z.object({\r\n      name:z.string(),\r\n      githubUrl : z.string(),\r\n      githubToken : z.string().optional(),\r\n    })\r\n\r\n  \r\n\r\n  ).mutation(async ({ctx , input}) =>{\r\n    const project = await ctx.db.project.create({\r\n      data:{\r\n        githubUrl : input.githubUrl,\r\n        name:input.name,\r\n        UserToProjects : {\r\n          create:{\r\n            userId:ctx.user.userId!,\r\n          }\r\n        }}\r\n    })\r\n    await indexGithubRepo(project.id ,input.githubUrl,input.githubToken)\r\n    await pollCommits(project.id)\r\n    return project;\r\n  }),\r\n\r\n  getProjects : protectedProcedure.query(async ({ ctx }) => {\r\n    return await ctx.db.project.findMany({\r\n      where : {\r\n        UserToProjects : {\r\n          some : {\r\n            userId: ctx.user.userId!\r\n          }\r\n        },\r\n        deletedAt : null\r\n      }\r\n  })\r\n}),\r\ngetCommits : protectedProcedure.input(z.object({\r\n    projectId : z.string()\r\n  })).query(async ({ ctx , input}) =>{\r\n    return await ctx.db.commit.findMany({where : {projectId :input.projectId}})\r\n  })\r\n\r\n})"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,gBAAgB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC5C,eAAgB,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CACtC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAK,sIAAA,CAAA,IAAC,CAAC,MAAM;QACb,WAAY,sIAAA,CAAA,IAAC,CAAC,MAAM;QACpB,aAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACnC,IAIA,QAAQ,CAAC,OAAO,EAAC,GAAG,EAAG,KAAK,EAAC;QAC7B,MAAM,UAAU,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAK;gBACH,WAAY,MAAM,SAAS;gBAC3B,MAAK,MAAM,IAAI;gBACf,gBAAiB;oBACf,QAAO;wBACL,QAAO,IAAI,IAAI,CAAC,MAAM;oBACxB;gBACF;YAAC;QACL;QACA,MAAM,CAAA,GAAA,gIAAA,CAAA,kBAAe,AAAD,EAAE,QAAQ,EAAE,EAAE,MAAM,SAAS,EAAC,MAAM,WAAW;QACnE,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,QAAQ,EAAE;QAC5B,OAAO;IACT;IAEA,aAAc,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnD,OAAO,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YACnC,OAAQ;gBACN,gBAAiB;oBACf,MAAO;wBACL,QAAQ,IAAI,IAAI,CAAC,MAAM;oBACzB;gBACF;gBACA,WAAY;YACd;QACJ;IACF;IACA,YAAa,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC3C,WAAY,sIAAA,CAAA,IAAC,CAAC,MAAM;IACtB,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAG,KAAK,EAAC;QAC7B,OAAO,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAAC,OAAQ;gBAAC,WAAW,MAAM,SAAS;YAAA;QAAC;IAC3E;AAEF","debugId":null}},
    {"offset": {"line": 718, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/api/root.ts"],"sourcesContent":["import { createCallerFactory, createTRPCRouter } from \"@/server/api/trpc\";\nimport { projectRouter } from \"./routers/project\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  project : projectRouter\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,SAAU,4IAAA,CAAA,gBAAa;AACzB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"@/env\";\nimport { appRouter } from \"@/server/api/root\";\nimport { createTRPCContext } from \"@/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\n// const handler = (req: NextRequest) =>\n//   fetchRequestHandler({\n//     endpoint: \"/api/trpc\",\n//     req,\n//     router: appRouter,\n//     createContext: () => createContext(req),\n//     onError:\n//       env.NODE_ENV === \"development\"\n//         ? ({ path, error,input }) => {\n//             console.error(\n//               `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`,\n//             );\n//           }\n//         : undefined,\n//   });\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error, input }) => {\n            console.error(`❌ tRPC failed on ${path ?? \"<no-path>\"}:`, error);\n            if (input) {\n              console.error(\"Input that caused the error:\", input);\n            }\n          }\n        : undefined,\n  });\n\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAGA;AACA;AACA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,wCAAwC;AACxC,0BAA0B;AAC1B,6BAA6B;AAC7B,WAAW;AACX,yBAAyB;AACzB,+CAA+C;AAC/C,eAAe;AACf,uCAAuC;AACvC,yCAAyC;AACzC,6BAA6B;AAC7B,6EAA6E;AAC7E,iBAAiB;AACjB,cAAc;AACd,uBAAuB;AACvB,QAAQ;AACR,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,uLAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;YACrB,QAAQ,KAAK,CAAC,CAAC,iBAAiB,EAAE,QAAQ,YAAY,CAAC,CAAC,EAAE;YAC1D,IAAI,OAAO;gBACT,QAAQ,KAAK,CAAC,gCAAgC;YAChD;QACF,IACA;IACR","debugId":null}}]
}