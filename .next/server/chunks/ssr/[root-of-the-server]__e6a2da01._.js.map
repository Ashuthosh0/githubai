{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/lib/gemini.ts"],"sourcesContent":["import {GoogleGenerativeAI} from '@google/generative-ai'\r\nimport type { Document } from '@langchain/core/documents'\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API!)\r\nconst model = genAI.getGenerativeModel({\r\n  model : 'gemini-1.5-flash'\r\n})\r\n\r\nexport const aisummarizeCommit = async (diff : string) => {\r\n  const response = await model.generateContent([\r\n    `You are an expert programmer, and you are trying to summarize a git diff.\r\n\r\nReminders about the git diff format:\r\nFor every file, there are a few metadata lines, like (for example):\r\n\\`\\`\\`\r\ndiff --git a/lib/index.js b/lib/index.js\r\nindex aadf691..bfef603 100644\r\n--- a/lib/index.js\r\n+++ b/lib/index.js\r\n\\`\\`\\`\r\nThis means that \\`lib/index.js\\` was modified in this commit. Note that this is only an example.\r\nThen there is a specifier of the lines that were modified.\r\n\r\nA line starting with \\`+\\` means it was added.\r\nA line that starting with \\`-\\` means that line was deleted.\r\nA line that does not start with \\`+\\` nor \\`-\\` is code given for context better understanding.\r\n\r\nIt is not part of the diff.\r\n\r\n[...]\r\n\r\nEXAMPLE SUMMARY COMMENTS:\r\n\\`\\`\\`\r\n* Raised the amount of returned recordings from \\`10\\` to \\`100\\` [packages/server/recordings_api.ts], [packages/server/constants.ts]\r\n* Fixed a typo in the github action name [.github/workflows/gpt-commit-summarizer.yml]\r\n* Moved the \\`octokit\\` initialization to a separate file [src/octokit.ts], [src/index.ts]\r\n* Added an OpenAI API for completions [packages/utils/apis/openai.ts]\r\n* Lowered numeric tolerance for test files\r\n\\`\\`\\`\r\nMost commits will have less comments than this examples list.\r\nThe last comment does not include the file names,\r\nbecause there were more than two relevant files in the hypothetical commit.\r\nDo not include parts of the example in your summary.\r\nIt is given only as an example of appropriate comments.\r\n\r\nPlease summarise the following diff file: \\n\\n${diff},`\r\n  ])\r\n  return response.response.text();\r\n}\r\n\r\nexport async function summariseCode(doc : Document){\r\n  try{ \r\n    console.log(\"getting summary for \" , doc.metadata.source);\r\n    const code = doc.pageContent.slice(0,10000);\r\n    const response = await model.generateContent([\r\n    `You are an intelligent senior software engineer who specializes in onboarding junior software engineers into projects`,\r\n    `You are onboarding a junior software engineer and explaining to them the purpose of the ${doc.metadata.source} file`,\r\n    `here is the code:\r\n    ---\r\n      ${code}\r\n      ---\r\n        Give a summary no more than 100 words of the code above`,\r\n  ]);\r\n\r\n  return response.response.text();\r\n  }\r\n  catch(error){\r\n    console.log(error);\r\n    return \"Unable to generate a summary for this code.\";\r\n  }\r\n}\r\n\r\n\r\nexport async function generateEmbedding(summary : string){\r\n  const model = genAI.getGenerativeModel({\r\n    model : \"text-embedding-004\"\r\n  })\r\n  const result = await model.embedContent(summary)\r\n  const embedding = result.embedding\r\n  return embedding.values;\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;;AAAA;;AAGA,MAAM,QAAQ,IAAI,8JAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,UAAU;AAC3D,MAAM,QAAQ,MAAM,kBAAkB,CAAC;IACrC,OAAQ;AACV;AAEO,MAAM,oBAAoB,OAAO;IACtC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;QAC3C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAmCyC,EAAE,KAAK,CAAC,CAAC;KACpD;IACD,OAAO,SAAS,QAAQ,CAAC,IAAI;AAC/B;AAEO,eAAe,cAAc,GAAc;IAChD,IAAG;QACD,QAAQ,GAAG,CAAC,wBAAyB,IAAI,QAAQ,CAAC,MAAM;QACxD,MAAM,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,GAAE;QACrC,MAAM,WAAW,MAAM,MAAM,eAAe,CAAC;YAC7C,CAAC,qHAAqH,CAAC;YACvH,CAAC,wFAAwF,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;YACrH,CAAC;;MAEC,EAAE,KAAK;;+DAEkD,CAAC;SAC7D;QAED,OAAO,SAAS,QAAQ,CAAC,IAAI;IAC7B,EACA,OAAM,OAAM;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT;AACF;AAGO,eAAe,kBAAkB,OAAgB;IACtD,MAAM,QAAQ,MAAM,kBAAkB,CAAC;QACrC,OAAQ;IACV;IACA,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC;IACxC,MAAM,YAAY,OAAO,SAAS;IAClC,OAAO,UAAU,MAAM;AAEzB","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,0IAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,0IAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/%28protected%29/dashboard/actions.ts"],"sourcesContent":["'use server'\r\n\r\nimport { generateEmbedding } from \"@/lib/gemini\"\r\nimport { streamText } from 'ai'\r\nimport { createStreamableValue } from 'ai/rsc'\r\nimport { createGoogleGenerativeAI } from '@ai-sdk/google'\r\nimport { db } from \"@/server/db\"\r\n\r\nconst google = createGoogleGenerativeAI({\r\n  apiKey: process.env.GEMINI_API,\r\n})\r\n\r\nexport async function askQuestion(question: string, projectId: string) {\r\n  console.log(`[askQuestion] Invoked with question: \"${question}\" | projectId: ${projectId}`)\r\n\r\n  const stream = createStreamableValue()\r\n  console.log(`[askQuestion] Initialized streamable value.`)\r\n\r\n  const queryVector = await generateEmbedding(question)\r\n  console.log(`[askQuestion] Generated query vector embedding. Vector length: ${queryVector.length}`)\r\n\r\n  const vectorQuery = `[${queryVector.join(',')}]`\r\n  console.log(`[askQuestion] Vector prepared for SQL query.`)\r\n\r\n  console.time('[askQuestion] Vector DB Query Time')\r\n  const result = await db.$queryRaw`\r\n    SELECT \"fileName\", \"sourceCode\", \"summary\",\r\n    1 - (\"summaryEmbedding\" <=> ${vectorQuery} :: vector) AS similarity\r\n    FROM \"SourceCodeEmbedding\"\r\n    WHERE 1 - (\"summaryEmbedding\" <=> ${vectorQuery} :: vector) > 0.5\r\n    AND \"projectId\" = ${projectId}\r\n    ORDER BY similarity DESC\r\n    LIMIT 10\r\n  ` as { fileName: string; sourceCode: string; summary: string }[]\r\n  console.timeEnd('[askQuestion] Vector DB Query Time')\r\n  console.log(`[askQuestion] Retrieved ${result.length} context files.`)\r\n\r\n  let context = ''\r\n  result.forEach((doc, index) => {\r\n    context += `source ${doc.fileName}\\ncode content : ${doc.sourceCode} \\n summary of file: ${doc.summary} \\n\\n`\r\n    console.log(`[askQuestion] Context doc[${index}] => fileName: ${doc.fileName}, sourceCode.length: ${doc.sourceCode.length}, summary.length: ${doc.summary.length}`)\r\n  })\r\n\r\n  console.log(`[askQuestion] Constructed context block. Total length: ${context.length}`)\r\n\r\n  ;(async () => {\r\n    console.log(`[askQuestion] Starting Gemini streamText call...`)\r\n    const { textStream } = await streamText({\r\n      model: google('gemini-1.5-flash'),\r\n      prompt: `\r\nYou are an AI code assistant who answers questions about the codebase. Your target audience is a technical intern.\r\nAI assistant is a brand new, powerful, human-like artificial intelligence.\r\nThe traits of AI include expert knowledge, helpfulness, cleverness, and articulateness.\r\nAI is a well-behaved and well-mannered individual.\r\nAI is always friendly, kind, and inspiring, and is eager to provide vivid and thoughtful responses to the user.\r\nAI has the sum of all knowledge in their brain, and is able to accurately answer nearly any question about any topic.\r\nIf the question is asking about code or a specific file, AI will provide a detailed answer, giving step-by-step instructions.\r\nSTART CONTEXT BLOCK\r\n${context}\r\nEND OF CONTEXT BLOCK\r\nSTART QUESTION\r\n${question}\r\nEND OF QUESTION\r\nAI assistant will take into account any CONTEXT BLOCK that is provided in a conversation.\r\nIf the context does not provide the answer to the question, the AI assistant will say, \"I'm sorry, but I don't have enough information to answer that based on the provided context.\"\r\nAI assistant will not apologize for previous responses, but instead will indicate when new information would be helpful.\r\nAI assistant will not invent anything that is not drawn directly from the context.\r\nAnswer in markdown syntax, with code snippets if needed. Be as detailed as possible when answering technical questions.\r\n      `,\r\n    })\r\n\r\n    console.log(`[askQuestion] Gemini stream started.`)\r\n    let chunkCount = 0\r\n    for await (const delta of textStream) {\r\n      chunkCount++\r\n      console.log(`[askQuestion] Delta chunk [${chunkCount}]:`, delta)\r\n      stream.update(delta)\r\n    }\r\n    stream.done()\r\n    console.log(`[askQuestion] Streaming completed. Total chunks received: ${chunkCount}`)\r\n  })()\r\n\r\n  console.log(`[askQuestion] Returning stream and file references to caller.`)\r\n\r\n  return {\r\n    output: stream.value, // not stream.value!\r\n    filesReferences: result,\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA,MAAM,SAAS,CAAA,GAAA,uJAAA,CAAA,2BAAwB,AAAD,EAAE;IACtC,QAAQ,QAAQ,GAAG,CAAC,UAAU;AAChC;AAEO,eAAe,YAAY,QAAgB,EAAE,SAAiB;IACnE,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,SAAS,eAAe,EAAE,WAAW;IAE1F,MAAM,SAAS,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD;IACnC,QAAQ,GAAG,CAAC,CAAC,2CAA2C,CAAC;IAEzD,MAAM,cAAc,MAAM,CAAA,GAAA,oHAAA,CAAA,oBAAiB,AAAD,EAAE;IAC5C,QAAQ,GAAG,CAAC,CAAC,+DAA+D,EAAE,YAAY,MAAM,EAAE;IAElG,MAAM,cAAc,CAAC,CAAC,EAAE,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC;IAChD,QAAQ,GAAG,CAAC,CAAC,4CAA4C,CAAC;IAE1D,QAAQ,IAAI,CAAC;IACb,MAAM,SAAS,MAAM,mHAAA,CAAA,KAAE,CAAC,SAAS,CAAC;;gCAEJ,EAAE,YAAY;;sCAER,EAAE,YAAY;sBAC9B,EAAE,UAAU;;;EAGhC,CAAC;IACD,QAAQ,OAAO,CAAC;IAChB,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,OAAO,MAAM,CAAC,eAAe,CAAC;IAErE,IAAI,UAAU;IACd,OAAO,OAAO,CAAC,CAAC,KAAK;QACnB,WAAW,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC,iBAAiB,EAAE,IAAI,UAAU,CAAC,qBAAqB,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC;QAC7G,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,MAAM,eAAe,EAAE,IAAI,QAAQ,CAAC,qBAAqB,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE;IACpK;IAEA,QAAQ,GAAG,CAAC,CAAC,uDAAuD,EAAE,QAAQ,MAAM,EAAE;IAErF,CAAC;QACA,QAAQ,GAAG,CAAC,CAAC,gDAAgD,CAAC;QAC9D,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,aAAU,AAAD,EAAE;YACtC,OAAO,OAAO;YACd,QAAQ,CAAC;;;;;;;;;AASf,EAAE,QAAQ;;;AAGV,EAAE,SAAS;;;;;;;MAOL,CAAC;QACH;QAEA,QAAQ,GAAG,CAAC,CAAC,oCAAoC,CAAC;QAClD,IAAI,aAAa;QACjB,WAAW,MAAM,SAAS,WAAY;YACpC;YACA,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,WAAW,EAAE,CAAC,EAAE;YAC1D,OAAO,MAAM,CAAC;QAChB;QACA,OAAO,IAAI;QACX,QAAQ,GAAG,CAAC,CAAC,0DAA0D,EAAE,YAAY;IACvF,CAAC;IAED,QAAQ,GAAG,CAAC,CAAC,6DAA6D,CAAC;IAE3E,OAAO;QACL,QAAQ,OAAO,KAAK;QACpB,iBAAiB;IACnB;AACF;;;IA5EsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/%28protected%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(protected)/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(protected)/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/%28protected%29/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(protected)/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(protected)/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}