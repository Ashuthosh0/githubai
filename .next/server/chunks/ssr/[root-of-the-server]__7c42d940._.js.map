{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,0IAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,0IAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/%28protected%29/join/%5BprojectId%5D/page.tsx"],"sourcesContent":["import { db } from '@/server/db'\r\nimport { auth, clerkClient } from '@clerk/nextjs/server'\r\nimport { redirect } from 'next/navigation'\r\n\r\ntype Props = {\r\n  params : Promise<{projectId :string}>\r\n}\r\n\r\nconst JoinHandler =async (props: Props) => {\r\n  const {projectId} = await props.params\r\n  const {userId} = await auth()\r\n  if(!userId) return redirect(\"/sign-in\")\r\n  const dbUser = await db.user.findUnique({\r\nwhere :{\r\n  id:userId\r\n}})\r\nconst client = await clerkClient()\r\nconst user = await client.users.getUser(userId)\r\n\r\nif(!dbUser){\r\n  await db.user.create({\r\n    data:{\r\n      id:userId,\r\n      emailAddress : user.emailAddresses[0]?.emailAddress,\r\n      imageUrl : user.imageUrl,\r\n      firstName : user.firstName,\r\n      lastName : user.lastName\r\n    }\r\n  })\r\n}\r\nconst project = await db.project.findUnique({\r\n  where:{\r\n    id:projectId\r\n  }\r\n})\r\nif(!project) return redirect(\"/dashboard\")\r\n  try {\r\nawait db.userToProject.create({\r\n  data:{\r\n    userId ,\r\n    projectId ,\r\n  }\r\n})}\r\ncatch(error){\r\n  console.log(\"user is already in the project \")\r\n}\r\n  return (\r\n  redirect(`/dashboard/${projectId}`)\r\n  )\r\n}\r\n\r\nexport default JoinHandler"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;AAAA;;;;AAMA,MAAM,cAAa,OAAO;IACxB,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,MAAM,MAAM;IACtC,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC1B,IAAG,CAAC,QAAQ,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAC5B,MAAM,SAAS,MAAM,mHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAC1C,OAAO;YACL,IAAG;QACL;IAAC;IACD,MAAM,SAAS,MAAM,CAAA,GAAA,yKAAA,CAAA,cAAW,AAAD;IAC/B,MAAM,OAAO,MAAM,OAAO,KAAK,CAAC,OAAO,CAAC;IAExC,IAAG,CAAC,QAAO;QACT,MAAM,mHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnB,MAAK;gBACH,IAAG;gBACH,cAAe,KAAK,cAAc,CAAC,EAAE,EAAE;gBACvC,UAAW,KAAK,QAAQ;gBACxB,WAAY,KAAK,SAAS;gBAC1B,UAAW,KAAK,QAAQ;YAC1B;QACF;IACF;IACA,MAAM,UAAU,MAAM,mHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,UAAU,CAAC;QAC1C,OAAM;YACJ,IAAG;QACL;IACF;IACA,IAAG,CAAC,SAAS,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAC3B,IAAI;QACN,MAAM,mHAAA,CAAA,KAAE,CAAC,aAAa,CAAC,MAAM,CAAC;YAC5B,MAAK;gBACH;gBACA;YACF;QACF;IAAE,EACF,OAAM,OAAM;QACV,QAAQ,GAAG,CAAC;IACd;IACE,OACA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,WAAW,EAAE,WAAW;AAEpC;uCAEe","debugId":null}}]
}