{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/lib/assembly.ts"],"sourcesContent":["import {AssemblyAI} from 'assemblyai'\r\n\r\nconst client = new AssemblyAI({apiKey: process.env.ASSEMBLYAI_API_KEY!})\r\n\r\nfunction msToTime(ms:number) {\r\n  const seconds = ms/1000\r\n  const minutes = Math.floor(seconds/60)\r\n  const remainingSeconds = Math.floor(seconds %60)\r\n\r\n  return `${minutes.toString().padStart(2,'0')}:${remainingSeconds.toString().padStart(2,'0')}`\r\n}\r\n\r\nexport const processMeeting = async (meetingUrl : string) =>{\r\n  const transcript = await client.transcripts.transcribe({\r\n    audio : meetingUrl,\r\n    auto_chapters :true,\r\n  })\r\n\r\n  const summaries = transcript.chapters?.map(chapter =>({\r\n    start : msToTime(chapter.start),\r\n    end : msToTime(chapter.end),\r\n    gist : chapter.gist,\r\n    headline : chapter.headline,\r\n    summary : chapter.summary\r\n  })) || []\r\n\r\n  if (!transcript.text) throw new Error(\"No transcript found\")\r\n\r\n  return {\r\n    transcript : transcript , summaries\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6IAAA,CAAA,aAAU,CAAC;IAAC,QAAQ,QAAQ,GAAG,CAAC,kBAAkB;AAAC;AAEtE,SAAS,SAAS,EAAS;IACzB,MAAM,UAAU,KAAG;IACnB,MAAM,UAAU,KAAK,KAAK,CAAC,UAAQ;IACnC,MAAM,mBAAmB,KAAK,KAAK,CAAC,UAAS;IAE7C,OAAO,GAAG,QAAQ,QAAQ,GAAG,QAAQ,CAAC,GAAE,KAAK,CAAC,EAAE,iBAAiB,QAAQ,GAAG,QAAQ,CAAC,GAAE,MAAM;AAC/F;AAEO,MAAM,iBAAiB,OAAO;IACnC,MAAM,aAAa,MAAM,OAAO,WAAW,CAAC,UAAU,CAAC;QACrD,OAAQ;QACR,eAAe;IACjB;IAEA,MAAM,YAAY,WAAW,QAAQ,EAAE,IAAI,CAAA,UAAU,CAAC;YACpD,OAAQ,SAAS,QAAQ,KAAK;YAC9B,KAAM,SAAS,QAAQ,GAAG;YAC1B,MAAO,QAAQ,IAAI;YACnB,UAAW,QAAQ,QAAQ;YAC3B,SAAU,QAAQ,OAAO;QAC3B,CAAC,MAAM,EAAE;IAET,IAAI,CAAC,WAAW,IAAI,EAAE,MAAM,IAAI,MAAM;IAEtC,OAAO;QACL,YAAa;QAAa;IAC5B;AACF","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,4IAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,4IAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"@/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/PVGAR/Documents/githubAI/githubai/src/app/api/process-meeting/route.ts"],"sourcesContent":["import { processMeeting } from \"@/lib/assembly\";\r\nimport { db } from \"@/server/db\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\n\r\n\r\nconst bodyParser = z.object({\r\n  meetingUrl : z.string(),\r\n  projectId : z.string(),\r\n  meetingId : z.string()\r\n})\r\n\r\nconst maxDuration = 300;\r\nexport async function POST(req : NextRequest){\r\n  try{\r\n    const body = await req.json()\r\n    const {meetingUrl , projectId , meetingId} = bodyParser.parse(body)\r\n    const {summaries} = await processMeeting(meetingUrl)\r\n    await db.issue.createMany({\r\n      data : summaries.map(summary =>({\r\n        start : summary.start,\r\n        end : summary.end,\r\n        gist : summary.gist,\r\n        headline : summary.headline,\r\n        summary: summary.summary, \r\n        meetingId\r\n\r\n      }))\r\n    })\r\n    await db.meeting.update({\r\n      where : {id : meetingId} , data:{\r\n          status : \"COMPLETED\",\r\n          name : summaries[0]!.headline\r\n        }\r\n      })\r\n    \r\n    return NextResponse.json({ success : true} , {status : 200})\r\n  }\r\n  catch(error){\r\n    console.error(error)\r\n    return NextResponse.json({error : \"Internal server error\"} , {status : 500})\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAGA,MAAM,aAAa,4IAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,YAAa,4IAAA,CAAA,IAAC,CAAC,MAAM;IACrB,WAAY,4IAAA,CAAA,IAAC,CAAC,MAAM;IACpB,WAAY,4IAAA,CAAA,IAAC,CAAC,MAAM;AACtB;AAEA,MAAM,cAAc;AACb,eAAe,KAAK,GAAiB;IAC1C,IAAG;QACD,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAC,UAAU,EAAG,SAAS,EAAG,SAAS,EAAC,GAAG,WAAW,KAAK,CAAC;QAC9D,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,iBAAc,AAAD,EAAE;QACzC,MAAM,qHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,UAAU,CAAC;YACxB,MAAO,UAAU,GAAG,CAAC,CAAA,UAAU,CAAC;oBAC9B,OAAQ,QAAQ,KAAK;oBACrB,KAAM,QAAQ,GAAG;oBACjB,MAAO,QAAQ,IAAI;oBACnB,UAAW,QAAQ,QAAQ;oBAC3B,SAAS,QAAQ,OAAO;oBACxB;gBAEF,CAAC;QACH;QACA,MAAM,qHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,MAAM,CAAC;YACtB,OAAQ;gBAAC,IAAK;YAAS;YAAI,MAAK;gBAC5B,QAAS;gBACT,MAAO,SAAS,CAAC,EAAE,CAAE,QAAQ;YAC/B;QACF;QAEF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAU;QAAI,GAAI;YAAC,QAAS;QAAG;IAC5D,EACA,OAAM,OAAM;QACV,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAQ;QAAuB,GAAI;YAAC,QAAS;QAAG;IAC5E;AACF","debugId":null}}]
}