(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/indexes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMulticharIndex": (()=>createMulticharIndex),
    "createRegularIndex": (()=>createRegularIndex),
    "emptyMulticharIndex": (()=>emptyMulticharIndex),
    "emptyRegularIndex": (()=>emptyRegularIndex)
});
var emptyMulticharIndex = {};
var emptyRegularIndex = {};
function extendIndex(item, index) {
    var currentIndex = index;
    for(var pos = 0; pos < item.length; pos++){
        var isLast = pos === item.length - 1;
        var char = item.charAt(pos);
        var charIndex = currentIndex[char] || (currentIndex[char] = {
            chars: {}
        });
        if (isLast) {
            charIndex.self = item;
        }
        currentIndex = charIndex.chars;
    }
}
function createMulticharIndex(items) {
    if (items.length === 0) {
        return emptyMulticharIndex;
    }
    var index = {};
    for(var _i = 0, items_1 = items; _i < items_1.length; _i++){
        var item = items_1[_i];
        extendIndex(item, index);
    }
    return index;
}
function createRegularIndex(items) {
    if (items.length === 0) {
        return emptyRegularIndex;
    }
    var result = {};
    for(var _i = 0, items_2 = items; _i < items_2.length; _i++){
        var item = items_2[_i];
        result[item] = true;
    }
    return result;
}
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "calculatePseudoSignatures": (()=>calculatePseudoSignatures),
    "defaultPseudoSignature": (()=>defaultPseudoSignature),
    "emptyPseudoSignatures": (()=>emptyPseudoSignatures),
    "inverseCategories": (()=>inverseCategories)
});
var emptyPseudoSignatures = {};
var defaultPseudoSignature = {
    type: 'String',
    optional: true
};
function calculatePseudoSignature(types) {
    var result = {
        type: 'NoArgument',
        optional: false
    };
    function setResultType(type) {
        if (result.type && result.type !== type && result.type !== 'NoArgument') {
            throw new Error("Conflicting pseudo-class argument type: \"".concat(result.type, "\" vs \"").concat(type, "\"."));
        }
        result.type = type;
    }
    for(var _i = 0, types_1 = types; _i < types_1.length; _i++){
        var type = types_1[_i];
        if (type === 'NoArgument') {
            result.optional = true;
        }
        if (type === 'Formula') {
            setResultType('Formula');
        }
        if (type === 'FormulaOfSelector') {
            setResultType('Formula');
            result.ofSelector = true;
        }
        if (type === 'String') {
            setResultType('String');
        }
        if (type === 'Selector') {
            setResultType('Selector');
        }
    }
    return result;
}
function inverseCategories(obj) {
    var result = {};
    for(var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++){
        var category = _a[_i];
        var items = obj[category];
        if (items) {
            for(var _b = 0, _c = items; _b < _c.length; _b++){
                var item = _c[_b];
                (result[item] || (result[item] = [])).push(category);
            }
        }
    }
    return result;
}
function calculatePseudoSignatures(definitions) {
    var pseudoClassesToArgumentTypes = inverseCategories(definitions);
    var result = {};
    for(var _i = 0, _a = Object.keys(pseudoClassesToArgumentTypes); _i < _a.length; _i++){
        var pseudoClass = _a[_i];
        var argumentTypes = pseudoClassesToArgumentTypes[pseudoClass];
        if (argumentTypes) {
            result[pseudoClass] = calculatePseudoSignature(argumentTypes);
        }
    }
    return result;
}
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/syntax-definitions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "buildPseudoLocationIndex": (()=>buildPseudoLocationIndex),
    "cssModules": (()=>cssModules),
    "cssSyntaxDefinitions": (()=>cssSyntaxDefinitions),
    "extendSyntaxDefinition": (()=>extendSyntaxDefinition),
    "getXmlOptions": (()=>getXmlOptions),
    "pseudoLocationIndex": (()=>pseudoLocationIndex)
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var emptyXmlOptions = {};
var defaultXmlOptions = {
    wildcard: true
};
function getXmlOptions(param) {
    if (param) {
        if (typeof param === 'boolean') {
            return defaultXmlOptions;
        } else {
            return param;
        }
    } else {
        return emptyXmlOptions;
    }
}
function withMigration(migration, merge) {
    return function(base, extension) {
        return merge(migration(base), migration(extension));
    };
}
function withNoNegative(merge) {
    return function(base, extension) {
        var result = merge(base, extension);
        if (!result) {
            throw new Error("Syntax definition cannot be null or undefined.");
        }
        return result;
    };
}
function withPositive(positive, merge) {
    return function(base, extension) {
        if (extension === true) {
            return positive;
        }
        return merge(base === true ? positive : base, extension);
    };
}
function mergeSection(values) {
    return function(base, extension) {
        if (!extension || !base) {
            return extension;
        }
        if (typeof extension !== 'object' || extension === null) {
            throw new Error("Unexpected syntax definition extension type: ".concat(extension, "."));
        }
        var result = __assign({}, base);
        for(var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++){
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (key === 'latest') {
                continue;
            }
            var mergeSchema = values[key];
            result[key] = mergeSchema(base[key], value);
        }
        return result;
    };
}
function replaceValueIfSpecified(base, extension) {
    if (extension !== undefined) {
        return extension;
    }
    return base;
}
function concatArray(base, extension) {
    if (!extension) {
        return base;
    }
    if (!base) {
        return extension;
    }
    return base.concat(extension);
}
function mergeDefinitions(base, extension) {
    if (!extension) {
        return base;
    }
    if (!base) {
        return extension;
    }
    var result = __assign({}, base);
    for(var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++){
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (!value) {
            delete result[key];
            continue;
        }
        var baseValue = base[key];
        if (!baseValue) {
            result[key] = value;
            continue;
        }
        result[key] = baseValue.concat(value);
    }
    return result;
}
var extendSyntaxDefinition = withNoNegative(mergeSection({
    baseSyntax: replaceValueIfSpecified,
    modules: concatArray,
    tag: withPositive(defaultXmlOptions, mergeSection({
        wildcard: replaceValueIfSpecified
    })),
    ids: replaceValueIfSpecified,
    classNames: replaceValueIfSpecified,
    namespace: withPositive(defaultXmlOptions, mergeSection({
        wildcard: replaceValueIfSpecified
    })),
    combinators: concatArray,
    attributes: mergeSection({
        operators: concatArray,
        caseSensitivityModifiers: concatArray,
        unknownCaseSensitivityModifiers: replaceValueIfSpecified
    }),
    pseudoClasses: mergeSection({
        unknown: replaceValueIfSpecified,
        definitions: mergeDefinitions
    }),
    pseudoElements: mergeSection({
        unknown: replaceValueIfSpecified,
        notation: replaceValueIfSpecified,
        definitions: withMigration(function(definitions) {
            return Array.isArray(definitions) ? {
                NoArgument: definitions
            } : definitions;
        }, mergeDefinitions)
    })
}));
var css1SyntaxDefinition = {
    tag: {},
    ids: true,
    classNames: true,
    combinators: [],
    pseudoElements: {
        unknown: 'reject',
        notation: 'singleColon',
        definitions: [
            'first-letter',
            'first-line'
        ]
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: [
                'link',
                'visited',
                'active'
            ]
        }
    }
};
var css2SyntaxDefinition = extendSyntaxDefinition(css1SyntaxDefinition, {
    tag: {
        wildcard: true
    },
    combinators: [
        '>',
        '+'
    ],
    attributes: {
        unknownCaseSensitivityModifiers: 'reject',
        operators: [
            '=',
            '~=',
            '|='
        ]
    },
    pseudoElements: {
        definitions: [
            'before',
            'after'
        ]
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: [
                'hover',
                'focus',
                'first-child'
            ],
            String: [
                'lang'
            ]
        }
    }
});
var selectors3SyntaxDefinition = extendSyntaxDefinition(css2SyntaxDefinition, {
    namespace: {
        wildcard: true
    },
    combinators: [
        '~'
    ],
    attributes: {
        operators: [
            '^=',
            '$=',
            '*='
        ]
    },
    pseudoElements: {
        notation: 'both'
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'root',
                'last-child',
                'first-of-type',
                'last-of-type',
                'only-child',
                'only-of-type',
                'empty',
                'target',
                'enabled',
                'disabled',
                'checked',
                'indeterminate'
            ],
            Formula: [
                'nth-child',
                'nth-last-child',
                'nth-of-type',
                'nth-last-of-type'
            ],
            Selector: [
                'not'
            ]
        }
    }
});
var selectors4SyntaxDefinition = extendSyntaxDefinition(selectors3SyntaxDefinition, {
    combinators: [
        '||'
    ],
    attributes: {
        caseSensitivityModifiers: [
            'i',
            'I',
            's',
            'S'
        ]
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'any-link',
                'local-link',
                'target-within',
                'scope',
                'current',
                'past',
                'future',
                'focus-within',
                'focus-visible',
                'read-write',
                'read-only',
                'placeholder-shown',
                'default',
                'valid',
                'invalid',
                'in-range',
                'out-of-range',
                'required',
                'optional',
                'blank',
                'user-invalid',
                'playing',
                'paused',
                'autofill',
                'modal',
                'fullscreen',
                'picture-in-picture',
                'defined',
                'loading',
                'popover-open'
            ],
            Formula: [
                'nth-col',
                'nth-last-col'
            ],
            String: [
                'dir'
            ],
            FormulaOfSelector: [
                'nth-child',
                'nth-last-child'
            ],
            Selector: [
                'current',
                'is',
                'where',
                'has',
                'state'
            ]
        }
    },
    pseudoElements: {
        definitions: {
            NoArgument: [
                'marker'
            ],
            Selector: [
                'part'
            ]
        }
    }
});
var cssModules = {
    'css-position-1': {
        latest: false,
        pseudoClasses: {
            definitions: {
                NoArgument: [
                    'static',
                    'relative',
                    'absolute'
                ]
            }
        }
    },
    'css-position-2': {
        latest: false,
        pseudoClasses: {
            definitions: {
                NoArgument: [
                    'static',
                    'relative',
                    'absolute',
                    'fixed'
                ]
            }
        }
    },
    'css-position-3': {
        latest: false,
        pseudoClasses: {
            definitions: {
                NoArgument: [
                    'sticky',
                    'fixed',
                    'absolute',
                    'relative',
                    'static'
                ]
            }
        }
    },
    'css-position-4': {
        latest: true,
        pseudoClasses: {
            definitions: {
                NoArgument: [
                    'sticky',
                    'fixed',
                    'absolute',
                    'relative',
                    'static',
                    'initial'
                ]
            }
        }
    },
    'css-scoping-1': {
        latest: true,
        pseudoClasses: {
            definitions: {
                NoArgument: [
                    'host',
                    'host-context'
                ],
                Selector: [
                    'host',
                    'host-context'
                ]
            }
        },
        pseudoElements: {
            definitions: {
                Selector: [
                    'slotted'
                ]
            }
        }
    },
    'css-pseudo-4': {
        latest: true,
        pseudoElements: {
            definitions: {
                NoArgument: [
                    'marker',
                    'selection',
                    'target-text',
                    'search-text',
                    'spelling-error',
                    'grammar-error',
                    'backdrop',
                    'file-selector-button',
                    'prefix',
                    'postfix',
                    'placeholder',
                    'details-content'
                ],
                String: [
                    'highlight'
                ]
            }
        }
    },
    'css-shadow-parts-1': {
        latest: true,
        pseudoElements: {
            definitions: {
                Selector: [
                    'part'
                ]
            }
        }
    }
};
var latestSyntaxDefinition = __assign(__assign({}, selectors4SyntaxDefinition), {
    modules: Object.entries(cssModules).filter(function(_a) {
        var latest = _a[1].latest;
        return latest;
    }).map(function(_a) {
        var name = _a[0];
        return name;
    })
});
var progressiveSyntaxDefinition = extendSyntaxDefinition(latestSyntaxDefinition, {
    pseudoElements: {
        unknown: 'accept'
    },
    pseudoClasses: {
        unknown: 'accept'
    },
    attributes: {
        unknownCaseSensitivityModifiers: 'accept'
    }
});
var cssSyntaxDefinitions = {
    css1: css1SyntaxDefinition,
    css2: css2SyntaxDefinition,
    css3: selectors3SyntaxDefinition,
    'selectors-3': selectors3SyntaxDefinition,
    'selectors-4': selectors4SyntaxDefinition,
    latest: latestSyntaxDefinition,
    progressive: progressiveSyntaxDefinition
};
function buildPseudoLocationIndex() {
    var index = {
        pseudoClasses: {},
        pseudoElements: {}
    };
    // Add CSS Levels (excluding 'latest' and 'progressive')
    var cssLevels = [
        'css1',
        'css2',
        'css3',
        'selectors-3',
        'selectors-4'
    ];
    for(var _i = 0, cssLevels_1 = cssLevels; _i < cssLevels_1.length; _i++){
        var level = cssLevels_1[_i];
        var syntax = cssSyntaxDefinitions[level];
        // Process pseudo-classes
        if (syntax.pseudoClasses && typeof syntax.pseudoClasses === 'object') {
            var definitions = syntax.pseudoClasses.definitions;
            if (definitions) {
                for(var _a = 0, _b = Object.entries(definitions); _a < _b.length; _a++){
                    var _c = _b[_a], names = _c[1];
                    for(var _d = 0, names_1 = names; _d < names_1.length; _d++){
                        var name_1 = names_1[_d];
                        if (!index.pseudoClasses[name_1]) {
                            index.pseudoClasses[name_1] = [];
                        }
                        if (!index.pseudoClasses[name_1].includes(level)) {
                            index.pseudoClasses[name_1].push(level);
                        }
                    }
                }
            }
        }
        // Process pseudo-elements
        if (syntax.pseudoElements && typeof syntax.pseudoElements === 'object') {
            var definitions = syntax.pseudoElements.definitions;
            if (definitions) {
                if (Array.isArray(definitions)) {
                    for(var _e = 0, definitions_1 = definitions; _e < definitions_1.length; _e++){
                        var name_2 = definitions_1[_e];
                        if (!index.pseudoElements[name_2]) {
                            index.pseudoElements[name_2] = [];
                        }
                        if (!index.pseudoElements[name_2].includes(level)) {
                            index.pseudoElements[name_2].push(level);
                        }
                    }
                } else {
                    for(var _f = 0, _g = Object.values(definitions); _f < _g.length; _f++){
                        var names = _g[_f];
                        for(var _h = 0, names_2 = names; _h < names_2.length; _h++){
                            var name_3 = names_2[_h];
                            if (!index.pseudoElements[name_3]) {
                                index.pseudoElements[name_3] = [];
                            }
                            if (!index.pseudoElements[name_3].includes(level)) {
                                index.pseudoElements[name_3].push(level);
                            }
                        }
                    }
                }
            }
        }
    }
    // Add CSS Modules
    for(var _j = 0, _k = Object.entries(cssModules); _j < _k.length; _j++){
        var _l = _k[_j], moduleName = _l[0], moduleSyntax = _l[1];
        // Process pseudo-classes
        if (moduleSyntax.pseudoClasses && typeof moduleSyntax.pseudoClasses === 'object') {
            var definitions = moduleSyntax.pseudoClasses.definitions;
            if (definitions) {
                for(var _m = 0, _o = Object.values(definitions); _m < _o.length; _m++){
                    var names = _o[_m];
                    for(var _p = 0, names_3 = names; _p < names_3.length; _p++){
                        var name_4 = names_3[_p];
                        if (!index.pseudoClasses[name_4]) {
                            index.pseudoClasses[name_4] = [];
                        }
                        if (!index.pseudoClasses[name_4].includes(moduleName)) {
                            index.pseudoClasses[name_4].push(moduleName);
                        }
                    }
                }
            }
        }
        // Process pseudo-elements
        if (moduleSyntax.pseudoElements && typeof moduleSyntax.pseudoElements === 'object') {
            var definitions = moduleSyntax.pseudoElements.definitions;
            if (definitions) {
                if (Array.isArray(definitions)) {
                    for(var _q = 0, definitions_2 = definitions; _q < definitions_2.length; _q++){
                        var name_5 = definitions_2[_q];
                        if (!index.pseudoElements[name_5]) {
                            index.pseudoElements[name_5] = [];
                        }
                        if (!index.pseudoElements[name_5].includes(moduleName)) {
                            index.pseudoElements[name_5].push(moduleName);
                        }
                    }
                } else {
                    for(var _r = 0, _s = Object.values(definitions); _r < _s.length; _r++){
                        var names = _s[_r];
                        for(var _t = 0, names_4 = names; _t < names_4.length; _t++){
                            var name_6 = names_4[_t];
                            if (!index.pseudoElements[name_6]) {
                                index.pseudoElements[name_6] = [];
                            }
                            if (!index.pseudoElements[name_6].includes(moduleName)) {
                                index.pseudoElements[name_6].push(moduleName);
                            }
                        }
                    }
                }
            }
        }
    }
    return index;
}
var pseudoLocationIndex = buildPseudoLocationIndex();
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "digitsChars": (()=>digitsChars),
    "escapeIdentifier": (()=>escapeIdentifier),
    "escapeString": (()=>escapeString),
    "identEscapeChars": (()=>identEscapeChars),
    "isHex": (()=>isHex),
    "isIdent": (()=>isIdent),
    "isIdentStart": (()=>isIdentStart),
    "maxHexLength": (()=>maxHexLength),
    "quoteChars": (()=>quoteChars),
    "stringRenderEscapeChars": (()=>stringRenderEscapeChars),
    "whitespaceChars": (()=>whitespaceChars)
});
function isIdentStart(c) {
    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '-' || c === '_' || c === '\\' || c >= '\u00a0';
}
function isIdent(c) {
    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '-' || c === '_' || c >= '\u00a0';
}
function isHex(c) {
    return c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F' || c >= '0' && c <= '9';
}
var identEscapeChars = {
    '!': true,
    '"': true,
    '#': true,
    $: true,
    '%': true,
    '&': true,
    "'": true,
    '(': true,
    ')': true,
    '*': true,
    '+': true,
    ',': true,
    '.': true,
    '/': true,
    ';': true,
    '<': true,
    '=': true,
    '>': true,
    '?': true,
    '@': true,
    '[': true,
    '\\': true,
    ']': true,
    '^': true,
    '`': true,
    '{': true,
    '|': true,
    '}': true,
    '~': true
};
var stringRenderEscapeChars = {
    '\n': true,
    '\r': true,
    '\t': true,
    '\f': true,
    '\v': true
};
var whitespaceChars = {
    ' ': true,
    '\t': true,
    '\n': true,
    '\r': true,
    '\f': true
};
var quoteChars = {
    '"': true,
    "'": true
};
var digitsChars = {
    0: true,
    1: true,
    2: true,
    3: true,
    4: true,
    5: true,
    6: true,
    7: true,
    8: true,
    9: true
};
var maxHexLength = 6;
function escapeIdentifier(s) {
    var len = s.length;
    var result = '';
    var i = 0;
    while(i < len){
        var chr = s.charAt(i);
        if (identEscapeChars[chr] || chr === '-' && i === 1 && s.charAt(0) === '-') {
            result += '\\' + chr;
        } else {
            if (chr === '-' || chr === '_' || chr >= 'A' && chr <= 'Z' || chr >= 'a' && chr <= 'z' || chr >= '0' && chr <= '9' && i !== 0 && !(i === 1 && s.charAt(0) === '-')) {
                result += chr;
            } else {
                var charCode = chr.charCodeAt(0);
                if ((charCode & 0xf800) === 0xd800) {
                    var extraCharCode = s.charCodeAt(i++);
                    if ((charCode & 0xfc00) !== 0xd800 || (extraCharCode & 0xfc00) !== 0xdc00) {
                        throw Error('UCS-2(decode): illegal sequence');
                    }
                    charCode = ((charCode & 0x3ff) << 10) + (extraCharCode & 0x3ff) + 0x10000;
                }
                result += '\\' + charCode.toString(16) + ' ';
            }
        }
        i++;
    }
    return result.trim();
}
function escapeString(s) {
    var len = s.length;
    var result = '';
    var i = 0;
    while(i < len){
        var chr = s.charAt(i);
        if (chr === '"') {
            chr = '\\"';
        } else if (chr === '\\') {
            chr = '\\\\';
        } else if (stringRenderEscapeChars[chr]) {
            chr = '\\' + chr.charCodeAt(0).toString(16) + (i === len - 1 ? '' : ' ');
        }
        result += chr;
        i++;
    }
    return "\"".concat(result, "\"");
}
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/parser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createParser": (()=>createParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/indexes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/syntax-definitions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/utils.js [app-client] (ecmascript)");
;
;
;
;
var errorPrefix = "css-selector-parser parse error: ";
function createParser(options) {
    if (options === void 0) {
        options = {};
    }
    var _a = options.syntax, syntax = _a === void 0 ? 'latest' : _a, substitutes = options.substitutes, _b = options.strict, strict = _b === void 0 ? true : _b, modules = options.modules;
    var syntaxDefinition = typeof syntax === 'object' ? syntax : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssSyntaxDefinitions"][syntax];
    if (syntaxDefinition.baseSyntax) {
        syntaxDefinition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extendSyntaxDefinition"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssSyntaxDefinitions"][syntaxDefinition.baseSyntax], syntaxDefinition);
    }
    // Apply modules from syntax definition
    if (syntaxDefinition.modules && syntaxDefinition.modules.length > 0) {
        for(var _i = 0, _c = syntaxDefinition.modules; _i < _c.length; _i++){
            var module_1 = _c[_i];
            var moduleSyntax = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssModules"][module_1];
            if (moduleSyntax) {
                syntaxDefinition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extendSyntaxDefinition"])(moduleSyntax, syntaxDefinition);
            }
        }
    }
    // Apply additional modules if specified from options
    if (modules && modules.length > 0) {
        for(var _d = 0, modules_1 = modules; _d < modules_1.length; _d++){
            var module_2 = modules_1[_d];
            var moduleSyntax = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cssModules"][module_2];
            if (moduleSyntax) {
                syntaxDefinition = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extendSyntaxDefinition"])(moduleSyntax, syntaxDefinition);
            }
        }
    }
    var _e = syntaxDefinition.tag ? [
        true,
        Boolean((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getXmlOptions"])(syntaxDefinition.tag).wildcard)
    ] : [
        false,
        false
    ], tagNameEnabled = _e[0], tagNameWildcardEnabled = _e[1];
    var idEnabled = Boolean(syntaxDefinition.ids);
    var classNamesEnabled = Boolean(syntaxDefinition.classNames);
    var namespaceEnabled = Boolean(syntaxDefinition.namespace);
    var namespaceWildcardEnabled = syntaxDefinition.namespace && (syntaxDefinition.namespace === true || syntaxDefinition.namespace.wildcard === true);
    if (namespaceEnabled && !tagNameEnabled) {
        throw new Error("".concat(errorPrefix, "Namespaces cannot be enabled while tags are disabled."));
    }
    var substitutesEnabled = Boolean(substitutes);
    var combinatorsIndex = syntaxDefinition.combinators ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMulticharIndex"])(syntaxDefinition.combinators) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyMulticharIndex"];
    var _f = syntaxDefinition.attributes ? [
        true,
        syntaxDefinition.attributes.operators ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMulticharIndex"])(syntaxDefinition.attributes.operators) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyMulticharIndex"],
        syntaxDefinition.attributes.caseSensitivityModifiers ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRegularIndex"])(syntaxDefinition.attributes.caseSensitivityModifiers) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyRegularIndex"],
        syntaxDefinition.attributes.unknownCaseSensitivityModifiers === 'accept'
    ] : [
        false,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyMulticharIndex"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$indexes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyRegularIndex"],
        false
    ], attributesEnabled = _f[0], attributesOperatorsIndex = _f[1], attributesCaseSensitivityModifiers = _f[2], attributesAcceptUnknownCaseSensitivityModifiers = _f[3];
    var attributesCaseSensitivityModifiersEnabled = attributesAcceptUnknownCaseSensitivityModifiers || Object.keys(attributesCaseSensitivityModifiers).length > 0;
    var _g = syntaxDefinition.pseudoClasses ? [
        true,
        syntaxDefinition.pseudoClasses.definitions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculatePseudoSignatures"])(syntaxDefinition.pseudoClasses.definitions) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyPseudoSignatures"],
        syntaxDefinition.pseudoClasses.unknown === 'accept'
    ] : [
        false,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyPseudoSignatures"],
        false
    ], pseudoClassesEnabled = _g[0], pseudoClassesDefinitions = _g[1], pseudoClassesAcceptUnknown = _g[2];
    var _h = syntaxDefinition.pseudoElements ? [
        true,
        syntaxDefinition.pseudoElements.notation === 'singleColon' || syntaxDefinition.pseudoElements.notation === 'both',
        !syntaxDefinition.pseudoElements.notation || syntaxDefinition.pseudoElements.notation === 'doubleColon' || syntaxDefinition.pseudoElements.notation === 'both',
        syntaxDefinition.pseudoElements.definitions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["calculatePseudoSignatures"])(Array.isArray(syntaxDefinition.pseudoElements.definitions) ? {
            NoArgument: syntaxDefinition.pseudoElements.definitions
        } : syntaxDefinition.pseudoElements.definitions) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyPseudoSignatures"],
        syntaxDefinition.pseudoElements.unknown === 'accept'
    ] : [
        false,
        false,
        false,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["emptyPseudoSignatures"],
        false
    ], pseudoElementsEnabled = _h[0], pseudoElementsSingleColonNotationEnabled = _h[1], pseudoElementsDoubleColonNotationEnabled = _h[2], pseudoElementsDefinitions = _h[3], pseudoElementsAcceptUnknown = _h[4];
    var str = '';
    var l = str.length;
    var pos = 0;
    var chr = '';
    var is = function(comparison) {
        return chr === comparison;
    };
    var isTagStart = function() {
        return is('*') || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdentStart"])(chr);
    };
    var rewind = function(newPos) {
        pos = newPos;
        chr = str.charAt(pos);
    };
    var next = function() {
        pos++;
        chr = str.charAt(pos);
    };
    var readAndNext = function() {
        var current = chr;
        pos++;
        chr = str.charAt(pos);
        return current;
    };
    /** @throws ParserError */ function fail(errorMessage) {
        var position = Math.min(l - 1, pos);
        var error = new Error("".concat(errorPrefix).concat(errorMessage, " Pos: ").concat(position, "."));
        error.position = position;
        error.name = 'ParserError';
        throw error;
    }
    function assert(condition, errorMessage) {
        if (!condition) {
            return fail(errorMessage);
        }
    }
    var assertNonEof = function() {
        assert(pos < l, 'Unexpected end of input.');
    };
    var isEof = function() {
        return pos >= l;
    };
    var pass = function(character) {
        assert(pos < l, "Expected \"".concat(character, "\" but end of input reached."));
        assert(chr === character, "Expected \"".concat(character, "\" but \"").concat(chr, "\" found."));
        pos++;
        chr = str.charAt(pos);
    };
    function matchMulticharIndex(index) {
        var match = matchMulticharIndexPos(index, pos);
        if (match) {
            pos += match.length;
            chr = str.charAt(pos);
            return match;
        }
    }
    function matchMulticharIndexPos(index, subPos) {
        var char = str.charAt(subPos);
        var charIndex = index[char];
        if (charIndex) {
            var subMatch = matchMulticharIndexPos(charIndex.chars, subPos + 1);
            if (subMatch) {
                return subMatch;
            }
            if (charIndex.self) {
                return charIndex.self;
            }
        }
    }
    /**
     * @see https://www.w3.org/TR/css-syntax/#hex-digit-diagram
     */ function parseHex() {
        var hex = readAndNext();
        var count = 1;
        while((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(chr) && count < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["maxHexLength"]){
            hex += readAndNext();
            count++;
        }
        skipSingleWhitespace();
        return String.fromCharCode(parseInt(hex, 16));
    }
    /**
     * @see https://www.w3.org/TR/css-syntax/#string-token-diagram
     */ function parseString(quote) {
        var result = '';
        pass(quote);
        while(pos < l){
            if (is(quote)) {
                next();
                return result;
            } else if (is('\\')) {
                next();
                if (is(quote)) {
                    result += quote;
                    next();
                } else if (chr === '\n' || chr === '\f') {
                    next();
                } else if (chr === '\r') {
                    next();
                    if (is('\n')) {
                        next();
                    }
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(chr)) {
                    result += parseHex();
                } else {
                    result += chr;
                    next();
                }
            } else {
                result += chr;
                next();
            }
        }
        return result;
    }
    /**
     * @see https://www.w3.org/TR/css-syntax/#ident-token-diagram
     */ function parseIdentifier() {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdentStart"])(chr)) {
            return null;
        }
        var result = '';
        while(is('-')){
            result += chr;
            next();
        }
        if (result === '-' && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdent"])(chr) && !is('\\')) {
            fail('Identifiers cannot consist of a single hyphen.');
        }
        if (strict && result.length >= 2) {
            // Checking this only for strict mode since browsers work fine with these identifiers.
            fail('Identifiers cannot start with two hyphens with strict mode on.');
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digitsChars"][chr]) {
            fail('Identifiers cannot start with hyphens followed by digits.');
        }
        while(pos < l){
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdent"])(chr)) {
                result += readAndNext();
            } else if (is('\\')) {
                next();
                assertNonEof();
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(chr)) {
                    result += parseHex();
                } else {
                    result += readAndNext();
                }
            } else {
                break;
            }
        }
        return result;
    }
    function parsePseudoClassString() {
        var result = '';
        while(pos < l){
            if (is(')')) {
                break;
            } else if (is('\\')) {
                next();
                if (isEof() && !strict) {
                    return (result + '\\').trim();
                }
                assertNonEof();
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(chr)) {
                    result += parseHex();
                } else {
                    result += readAndNext();
                }
            } else {
                result += readAndNext();
            }
        }
        return result.trim();
    }
    function skipSingleWhitespace() {
        if (chr === ' ' || chr === '\t' || chr === '\f' || chr === '\n') {
            next();
            return;
        }
        if (chr === '\r') {
            next();
        }
        if (chr === '\n') {
            next();
        }
    }
    function skipWhitespace() {
        while(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespaceChars"][chr]){
            next();
        }
    }
    function parseSelector(relative) {
        if (relative === void 0) {
            relative = false;
        }
        skipWhitespace();
        var rules = [
            parseRule(relative)
        ];
        while(is(',')){
            next();
            skipWhitespace();
            rules.push(parseRule(relative));
        }
        return {
            type: 'Selector',
            rules: rules
        };
    }
    function parseAttribute() {
        pass('[');
        skipWhitespace();
        var attr;
        if (is('|')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            next();
            var name_1 = parseIdentifier();
            assert(name_1, 'Expected attribute name.');
            attr = {
                type: 'Attribute',
                name: name_1,
                namespace: {
                    type: 'NoNamespace'
                }
            };
        } else if (is('*')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
            next();
            pass('|');
            var name_2 = parseIdentifier();
            assert(name_2, 'Expected attribute name.');
            attr = {
                type: 'Attribute',
                name: name_2,
                namespace: {
                    type: 'WildcardNamespace'
                }
            };
        } else {
            var identifier = parseIdentifier();
            assert(identifier, 'Expected attribute name.');
            attr = {
                type: 'Attribute',
                name: identifier
            };
            if (is('|')) {
                var savedPos = pos;
                next();
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdentStart"])(chr)) {
                    assert(namespaceEnabled, 'Namespaces are not enabled.');
                    var name_3 = parseIdentifier();
                    assert(name_3, 'Expected attribute name.');
                    attr = {
                        type: 'Attribute',
                        name: name_3,
                        namespace: {
                            type: 'NamespaceName',
                            name: identifier
                        }
                    };
                } else {
                    rewind(savedPos);
                }
            }
        }
        assert(attr.name, 'Expected attribute name.');
        skipWhitespace();
        if (isEof() && !strict) {
            return attr;
        }
        if (is(']')) {
            next();
        } else {
            attr.operator = matchMulticharIndex(attributesOperatorsIndex);
            assert(attr.operator, 'Expected a valid attribute selector operator.');
            skipWhitespace();
            assertNonEof();
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["quoteChars"][chr]) {
                attr.value = {
                    type: 'String',
                    value: parseString(chr)
                };
            } else if (substitutesEnabled && is('$')) {
                next();
                var name_4 = parseIdentifier();
                assert(name_4, 'Expected substitute name.');
                attr.value = {
                    type: 'Substitution',
                    name: name_4
                };
            } else {
                var value = parseIdentifier();
                assert(value, 'Expected attribute value.');
                attr.value = {
                    type: 'String',
                    value: value
                };
            }
            skipWhitespace();
            if (isEof() && !strict) {
                return attr;
            }
            if (!is(']')) {
                var caseSensitivityModifier = parseIdentifier();
                assert(caseSensitivityModifier, 'Expected end of attribute selector.');
                attr.caseSensitivityModifier = caseSensitivityModifier;
                assert(attributesCaseSensitivityModifiersEnabled, 'Attribute case sensitivity modifiers are not enabled.');
                assert(attributesAcceptUnknownCaseSensitivityModifiers || attributesCaseSensitivityModifiers[attr.caseSensitivityModifier], 'Unknown attribute case sensitivity modifier.');
                skipWhitespace();
                if (isEof() && !strict) {
                    return attr;
                }
            }
            pass(']');
        }
        return attr;
    }
    function parseNumber() {
        var result = '';
        while(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digitsChars"][chr]){
            result += readAndNext();
        }
        assert(result !== '', 'Formula parse error.');
        return parseInt(result);
    }
    var isNumberStart = function() {
        return is('-') || is('+') || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digitsChars"][chr];
    };
    function parseFormula() {
        if (is('e') || is('o')) {
            var ident = parseIdentifier();
            if (ident === 'even') {
                skipWhitespace();
                return [
                    2,
                    0
                ];
            }
            if (ident === 'odd') {
                skipWhitespace();
                return [
                    2,
                    1
                ];
            }
        }
        var firstNumber = null;
        var firstNumberMultiplier = 1;
        if (is('-')) {
            next();
            firstNumberMultiplier = -1;
        }
        if (isNumberStart()) {
            if (is('+')) {
                next();
            }
            firstNumber = parseNumber();
            if (!is('\\') && !is('n')) {
                return [
                    0,
                    firstNumber * firstNumberMultiplier
                ];
            }
        }
        if (firstNumber === null) {
            firstNumber = 1;
        }
        firstNumber *= firstNumberMultiplier;
        var identifier;
        if (is('\\')) {
            next();
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(chr)) {
                identifier = parseHex();
            } else {
                identifier = readAndNext();
            }
        } else {
            identifier = readAndNext();
        }
        assert(identifier === 'n', 'Formula parse error: expected "n".');
        skipWhitespace();
        if (is('+') || is('-')) {
            var sign = is('+') ? 1 : -1;
            next();
            skipWhitespace();
            return [
                firstNumber,
                sign * parseNumber()
            ];
        } else {
            return [
                firstNumber,
                0
            ];
        }
    }
    function parsePseudoArgument(pseudoName, type, signature) {
        var argument;
        if (is('(')) {
            next();
            skipWhitespace();
            if (substitutesEnabled && is('$')) {
                next();
                var name_5 = parseIdentifier();
                assert(name_5, 'Expected substitute name.');
                argument = {
                    type: 'Substitution',
                    name: name_5
                };
            } else if (signature.type === 'String') {
                argument = {
                    type: 'String',
                    value: parsePseudoClassString()
                };
                assert(argument.value, "Expected ".concat(type, " argument value."));
            } else if (signature.type === 'Selector') {
                argument = parseSelector(true);
            } else if (signature.type === 'Formula') {
                var _a = parseFormula(), a = _a[0], b = _a[1];
                argument = {
                    type: 'Formula',
                    a: a,
                    b: b
                };
                if (signature.ofSelector) {
                    skipWhitespace();
                    if (is('o') || is('\\')) {
                        var ident = parseIdentifier();
                        assert(ident === 'of', 'Formula of selector parse error.');
                        skipWhitespace();
                        argument = {
                            type: 'FormulaOfSelector',
                            a: a,
                            b: b,
                            selector: parseRule()
                        };
                    }
                }
            } else {
                return fail("Invalid ".concat(type, " signature."));
            }
            skipWhitespace();
            if (isEof() && !strict) {
                return argument;
            }
            pass(')');
        } else {
            assert(signature.optional, "Argument is required for ".concat(type, " \"").concat(pseudoName, "\"."));
        }
        return argument;
    }
    function parseTagName() {
        if (is('*')) {
            assert(tagNameWildcardEnabled, 'Wildcard tag name is not enabled.');
            next();
            return {
                type: 'WildcardTag'
            };
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdentStart"])(chr)) {
            assert(tagNameEnabled, 'Tag names are not enabled.');
            var name_6 = parseIdentifier();
            assert(name_6, 'Expected tag name.');
            return {
                type: 'TagName',
                name: name_6
            };
        } else {
            return fail('Expected tag name.');
        }
    }
    function parseTagNameWithNamespace() {
        if (is('*')) {
            var savedPos = pos;
            next();
            if (!is('|')) {
                rewind(savedPos);
                return parseTagName();
            }
            next();
            if (!isTagStart()) {
                rewind(savedPos);
                return parseTagName();
            }
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            assert(namespaceWildcardEnabled, 'Wildcard namespace is not enabled.');
            var tagName = parseTagName();
            tagName.namespace = {
                type: 'WildcardNamespace'
            };
            return tagName;
        } else if (is('|')) {
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            next();
            var tagName = parseTagName();
            tagName.namespace = {
                type: 'NoNamespace'
            };
            return tagName;
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isIdentStart"])(chr)) {
            var identifier = parseIdentifier();
            assert(identifier, 'Expected tag name.');
            if (!is('|')) {
                assert(tagNameEnabled, 'Tag names are not enabled.');
                return {
                    type: 'TagName',
                    name: identifier
                };
            }
            var savedPos = pos;
            next();
            if (!isTagStart()) {
                rewind(savedPos);
                return {
                    type: 'TagName',
                    name: identifier
                };
            }
            assert(namespaceEnabled, 'Namespaces are not enabled.');
            var tagName = parseTagName();
            tagName.namespace = {
                type: 'NamespaceName',
                name: identifier
            };
            return tagName;
        } else {
            return fail('Expected tag name.');
        }
    }
    function parseRule(relative) {
        var _a, _b;
        if (relative === void 0) {
            relative = false;
        }
        var rule = {
            type: 'Rule',
            items: []
        };
        if (relative) {
            var combinator = matchMulticharIndex(combinatorsIndex);
            if (combinator) {
                rule.combinator = combinator;
                skipWhitespace();
            }
        }
        while(pos < l){
            if (isTagStart()) {
                assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
                rule.items.push(parseTagNameWithNamespace());
            } else if (is('|')) {
                var savedPos = pos;
                next();
                if (isTagStart()) {
                    assert(rule.items.length === 0, 'Unexpected tag/namespace start.');
                    rewind(savedPos);
                    rule.items.push(parseTagNameWithNamespace());
                } else {
                    rewind(savedPos);
                    break;
                }
            } else if (is('.')) {
                assert(classNamesEnabled, 'Class names are not enabled.');
                next();
                var className = parseIdentifier();
                assert(className, 'Expected class name.');
                rule.items.push({
                    type: 'ClassName',
                    name: className
                });
            } else if (is('#')) {
                assert(idEnabled, 'IDs are not enabled.');
                next();
                var idName = parseIdentifier();
                assert(idName, 'Expected ID name.');
                rule.items.push({
                    type: 'Id',
                    name: idName
                });
            } else if (is('[')) {
                assert(attributesEnabled, 'Attributes are not enabled.');
                rule.items.push(parseAttribute());
            } else if (is(':')) {
                var isDoubleColon = false;
                var isPseudoElement = false;
                next();
                if (is(':')) {
                    assert(pseudoElementsEnabled, 'Pseudo elements are not enabled.');
                    assert(pseudoElementsDoubleColonNotationEnabled, 'Pseudo elements double colon notation is not enabled.');
                    isDoubleColon = true;
                    next();
                }
                var pseudoName = parseIdentifier();
                assert(isDoubleColon || pseudoName, 'Expected pseudo-class name.');
                assert(!isDoubleColon || pseudoName, 'Expected pseudo-element name.');
                assert(pseudoName, 'Expected pseudo-class name.');
                if (!isDoubleColon || pseudoElementsAcceptUnknown || Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName)) {
                // All good
                } else {
                    // Generate a helpful error message with location information
                    var locations = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pseudoLocationIndex"].pseudoElements[pseudoName];
                    var errorMessage = "Unknown pseudo-element \"".concat(pseudoName, "\"");
                    if (locations && locations.length > 0) {
                        errorMessage += ". It is defined in: ".concat(locations.join(', '));
                    }
                    fail(errorMessage + '.');
                }
                isPseudoElement = pseudoElementsEnabled && (isDoubleColon || !isDoubleColon && pseudoElementsSingleColonNotationEnabled && Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName));
                if (isPseudoElement) {
                    var signature = (_a = pseudoElementsDefinitions[pseudoName]) !== null && _a !== void 0 ? _a : pseudoElementsAcceptUnknown && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultPseudoSignature"];
                    var pseudoElement = {
                        type: 'PseudoElement',
                        name: pseudoName
                    };
                    var argument = parsePseudoArgument(pseudoName, 'pseudo-element', signature);
                    if (argument) {
                        assert(argument.type !== 'Formula' && argument.type !== 'FormulaOfSelector', 'Pseudo-elements cannot have formula argument.');
                        pseudoElement.argument = argument;
                    }
                    rule.items.push(pseudoElement);
                } else {
                    assert(pseudoClassesEnabled, 'Pseudo-classes are not enabled.');
                    var signature = (_b = pseudoClassesDefinitions[pseudoName]) !== null && _b !== void 0 ? _b : pseudoClassesAcceptUnknown && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$pseudo$2d$signatures$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultPseudoSignature"];
                    if (signature) {
                    // All good
                    } else {
                        // Generate a helpful error message with location information
                        var locations = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$syntax$2d$definitions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pseudoLocationIndex"].pseudoClasses[pseudoName];
                        var errorMessage = "Unknown pseudo-class: \"".concat(pseudoName, "\"");
                        if (locations && locations.length > 0) {
                            errorMessage += ". It is defined in: ".concat(locations.join(', '));
                        }
                        fail(errorMessage + '.');
                    }
                    var argument = parsePseudoArgument(pseudoName, 'pseudo-class', signature);
                    var pseudoClass = {
                        type: 'PseudoClass',
                        name: pseudoName
                    };
                    if (argument) {
                        pseudoClass.argument = argument;
                    }
                    rule.items.push(pseudoClass);
                }
            } else {
                break;
            }
        }
        if (rule.items.length === 0) {
            if (isEof()) {
                return fail('Expected rule but end of input reached.');
            } else {
                return fail("Expected rule but \"".concat(chr, "\" found."));
            }
        }
        skipWhitespace();
        if (!isEof() && !is(',') && !is(')')) {
            var combinator = matchMulticharIndex(combinatorsIndex);
            skipWhitespace();
            rule.nestedRule = parseRule();
            rule.nestedRule.combinator = combinator;
        }
        return rule;
    }
    return function(input) {
        // noinspection SuspiciousTypeOfGuard
        if (typeof input !== 'string') {
            throw new Error("".concat(errorPrefix, "Expected string input."));
        }
        str = input;
        l = str.length;
        pos = 0;
        chr = str.charAt(0);
        return parseSelector();
    };
}
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/render.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "render": (()=>render)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/utils.js [app-client] (ecmascript)");
;
var errorPrefix = "css-selector-parser render error: ";
function renderNamespace(namespace) {
    if (namespace.type === 'WildcardNamespace') {
        return '*|';
    } else if (namespace.type === 'NamespaceName') {
        return "".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(namespace.name), "|");
    } else if (namespace.type === 'NoNamespace') {
        return '|';
    }
    throw new Error("".concat(errorPrefix, "Unknown namespace type: ").concat(namespace.type, "."));
}
function renderSubstitution(sub) {
    return "$".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(sub.name));
}
function renderFormula(a, b) {
    if (a) {
        var result = "".concat(a === 1 ? '' : a === -1 ? '-' : a, "n");
        if (b) {
            result += "".concat(b > 0 ? '+' : '').concat(b);
        }
        return result;
    } else {
        return String(b);
    }
}
function render(entity) {
    if (entity.type === 'Selector') {
        return entity.rules.map(render).join(', ');
    }
    if (entity.type === 'Rule') {
        var result = '';
        var items = entity.items, combinator = entity.combinator, nestedRule = entity.nestedRule;
        if (combinator) {
            result += "".concat(combinator, " ");
        }
        for(var _i = 0, items_1 = items; _i < items_1.length; _i++){
            var item = items_1[_i];
            result += render(item);
        }
        if (nestedRule) {
            result += " ".concat(render(nestedRule));
        }
        return result;
    } else if (entity.type === 'TagName' || entity.type === 'WildcardTag') {
        var result = '';
        var namespace = entity.namespace;
        if (namespace) {
            result += renderNamespace(namespace);
        }
        if (entity.type === 'TagName') {
            result += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(entity.name);
        } else if (entity.type === 'WildcardTag') {
            result += '*';
        }
        return result;
    } else if (entity.type === 'Id') {
        return "#".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(entity.name));
    } else if (entity.type === 'ClassName') {
        return ".".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(entity.name));
    } else if (entity.type === 'Attribute') {
        var name_1 = entity.name, namespace = entity.namespace, operator = entity.operator, value = entity.value, caseSensitivityModifier = entity.caseSensitivityModifier;
        var result = '[';
        if (namespace) {
            result += renderNamespace(namespace);
        }
        result += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(name_1);
        if (operator && value) {
            result += operator;
            if (value.type === 'String') {
                result += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeString"])(value.value);
            } else if (value.type === 'Substitution') {
                result += renderSubstitution(value);
            } else {
                throw new Error("Unknown attribute value type: ".concat(value.type, "."));
            }
            if (caseSensitivityModifier) {
                result += " ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(caseSensitivityModifier));
            }
        }
        result += ']';
        return result;
    } else if (entity.type === 'PseudoClass') {
        var name_2 = entity.name, argument = entity.argument;
        var result = ":".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(name_2));
        if (argument) {
            result += "(".concat(argument.type === 'String' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(argument.value) : render(argument), ")");
        }
        return result;
    } else if (entity.type === 'PseudoElement') {
        var name_3 = entity.name, argument = entity.argument;
        var result = "::".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(name_3));
        if (argument) {
            result += "(".concat(argument.type === 'String' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(argument.value) : render(argument), ")");
        }
        return result;
    } else if (entity.type === 'String') {
        throw new Error("".concat(errorPrefix, "String cannot be rendered outside of context."));
    } else if (entity.type === 'Formula') {
        return renderFormula(entity.a, entity.b);
    } else if (entity.type === 'FormulaOfSelector') {
        return renderFormula(entity.a, entity.b) + ' of ' + render(entity.selector);
    } else if (entity.type === 'Substitution') {
        return "$".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["escapeIdentifier"])(entity.name));
    }
    throw new Error("Unknown type specified to render method: ".concat(entity.type, "."));
}
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/ast.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ast": (()=>ast)
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function astMethods(type) {
    return function(generatorName, checkerName) {
        var _a;
        return _a = {}, _a[generatorName] = function(props) {
            return __assign({
                type: type
            }, props);
        }, _a[checkerName] = function(entity) {
            return typeof entity === 'object' && entity !== null && entity.type === type;
        }, _a;
    };
}
var ast = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, astMethods('Selector')('selector', 'isSelector')), astMethods('Rule')('rule', 'isRule')), astMethods('TagName')('tagName', 'isTagName')), astMethods('Id')('id', 'isId')), astMethods('ClassName')('className', 'isClassName')), astMethods('WildcardTag')('wildcardTag', 'isWildcardTag')), astMethods('NamespaceName')('namespaceName', 'isNamespaceName')), astMethods('WildcardNamespace')('wildcardNamespace', 'isWildcardNamespace')), astMethods('NoNamespace')('noNamespace', 'isNoNamespace')), astMethods('Attribute')('attribute', 'isAttribute')), astMethods('PseudoClass')('pseudoClass', 'isPseudoClass')), astMethods('PseudoElement')('pseudoElement', 'isPseudoElement')), astMethods('String')('string', 'isString')), astMethods('Formula')('formula', 'isFormula')), astMethods('FormulaOfSelector')('formulaOfSelector', 'isFormulaOfSelector')), astMethods('Substitution')('substitution', 'isSubstitution'));
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/parser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$render$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/render.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$ast$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/ast.js [app-client] (ecmascript)");
;
;
;
}}),
"[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/parser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$render$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/render.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$ast$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/ast.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/hast-util-select/lib/parse.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstSelector} from 'css-selector-parser'
 */ __turbopack_context__.s({
    "parse": (()=>parse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/css-selector-parser/dist/mjs/parser.js [app-client] (ecmascript)");
;
const cssSelectorParse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$css$2d$selector$2d$parser$2f$dist$2f$mjs$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createParser"])({
    syntax: 'selectors-4'
});
function parse(selector) {
    if (typeof selector !== 'string') {
        throw new TypeError('Expected `string` as selector, not `' + selector + '`');
    }
    return cssSelectorParse(selector);
}
}}),
"[project]/node_modules/hast-util-select/lib/enter-state.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {Visitor} from 'unist-util-visit'
 * @import {ElementContent, Nodes} from 'hast'
 * @import {Direction, State} from './index.js'
 */ __turbopack_context__.s({
    "enterState": (()=>enterState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$direction$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/direction/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-to-string/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/property-information/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/unist-util-visit-parents/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/unist-util-visit/lib/index.js [app-client] (ecmascript) <locals>");
;
;
;
;
function enterState(state, node) {
    const schema = state.schema;
    const language = state.language;
    const currentDirection = state.direction;
    const editableOrEditingHost = state.editableOrEditingHost;
    /** @type {Direction | undefined} */ let directionInferred;
    if (node.type === 'element') {
        const lang = node.properties.xmlLang || node.properties.lang;
        const type = node.properties.type || 'text';
        const direction = directionProperty(node);
        if (lang !== null && lang !== undefined) {
            state.language = String(lang);
        }
        if (schema && schema.space === 'html') {
            if (node.properties.contentEditable === 'true') {
                state.editableOrEditingHost = true;
            }
            if (node.tagName === 'svg') {
                state.schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"];
            }
            // See: <https://html.spec.whatwg.org/#the-directionality>.
            // Explicit `[dir=rtl]`.
            if (direction === 'rtl') {
                directionInferred = direction;
            } else if (// Explicit `[dir=ltr]`.
            direction === 'ltr' || direction !== 'auto' && node.tagName === 'html' || direction !== 'auto' && node.tagName === 'input' && type === 'tel') {
                directionInferred = 'ltr';
            // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
            } else if (direction === 'auto' || node.tagName === 'bdi') {
                if (node.tagName === 'textarea') {
                    // Check contents of `<textarea>`.
                    directionInferred = directionBidi((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$to$2d$string$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toString"])(node));
                } else if (node.tagName === 'input' && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {
                    // Check value of `<input>`.
                    directionInferred = node.properties.value ? directionBidi(String(node.properties.value)) : 'ltr';
                } else {
                    // Check text nodes in `node`.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$unist$2d$util$2d$visit$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["visit"])(node, inferDirectionality);
                }
            }
            if (directionInferred) {
                state.direction = directionInferred;
            }
        } else if (state.editableOrEditingHost) {
            state.editableOrEditingHost = false;
        }
    }
    return reset;
    "TURBOPACK unreachable";
    /**
   * @returns {undefined}
   *   Nothing.
   */ function reset() {
        state.schema = schema;
        state.language = language;
        state.direction = currentDirection;
        state.editableOrEditingHost = editableOrEditingHost;
    }
    /** @type {Visitor<ElementContent>} */ function inferDirectionality(child) {
        if (child.type === 'text') {
            directionInferred = directionBidi(child.value);
            return directionInferred ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EXIT"] : undefined;
        }
        if (child !== node && child.type === 'element' && (child.tagName === 'bdi' || child.tagName === 'script' || child.tagName === 'style' || child.tagName === 'textare' || directionProperty(child))) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$unist$2d$util$2d$visit$2d$parents$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SKIP"];
        }
    }
}
/**
 * See `wooorm/direction`.
 *
 * @param {string} value
 *   Value to check.
 * @returns {Exclude<Direction, 'auto'> | undefined}
 *   Directionality.
 */ function directionBidi(value) {
    const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$direction$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["direction"])(value);
    return result === 'neutral' ? undefined : result;
}
/**
 * @param {ElementContent} node
 *   Node to check.
 * @returns {Direction | undefined}
 *   Directionality.
 */ function directionProperty(node) {
    const value = node.type === 'element' && typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : undefined;
    return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : undefined;
}
}}),
"[project]/node_modules/hast-util-select/lib/attribute.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstAttribute} from 'css-selector-parser'
 * @import {Element, Properties} from 'hast'
 * @import {Info, Schema} from 'property-information'
 */ __turbopack_context__.s({
    "attribute": (()=>attribute)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/comma-separated-tokens/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/devlop/lib/development.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/property-information/lib/find.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/space-separated-tokens/index.js [app-client] (ecmascript)");
;
;
;
;
function attribute(query, element, schema) {
    const info = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$lib$2f$find$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["find"])(schema, query.name);
    const propertyValue = element.properties[info.property];
    let value = normalizeValue(propertyValue, info);
    // Exists.
    if (!query.value) {
        return value !== undefined;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.value.type === 'String', 'expected plain string');
    let key = query.value.value;
    // Case-sensitivity.
    if (query.caseSensitivityModifier === 'i') {
        key = key.toLowerCase();
        if (value) {
            value = value.toLowerCase();
        }
    }
    if (value !== undefined) {
        switch(query.operator){
            // Exact.
            case '=':
                {
                    return key === value;
                }
            // Ends.
            case '$=':
                {
                    return key === value.slice(-key.length);
                }
            // Contains.
            case '*=':
                {
                    return value.includes(key);
                }
            // Begins.
            case '^=':
                {
                    return key === value.slice(0, key.length);
                }
            // Exact or prefix.
            case '|=':
                {
                    return key === value || key === value.slice(0, key.length) && value.charAt(key.length) === '-';
                }
            // Space-separated list.
            case '~=':
                {
                    return(// For all other values (including comma-separated lists), return whether this
                    // is an exact match.
                    key === value || // If this is a space-separated list, and the query is contained in it, return
                    // true.
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"])(value).includes(key));
                }
        }
    }
    return false;
}
/**
 *
 * @param {Properties[keyof Properties]} value
 * @param {Info} info
 * @returns {string | undefined}
 */ function normalizeValue(value, info) {
    if (value === null || value === undefined) {
    // Empty.
    } else if (typeof value === 'boolean') {
        if (value) {
            return info.attribute;
        }
    } else if (Array.isArray(value)) {
        if (value.length > 0) {
            return (info.commaSeparated ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$space$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(value);
        }
    } else {
        return String(value);
    }
}
}}),
"[project]/node_modules/hast-util-select/lib/class-name.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstClassName} from 'css-selector-parser'
 * @import {Element} from 'hast'
 */ /** @type {Array<never>} */ __turbopack_context__.s({
    "className": (()=>className)
});
const emptyClassNames = [];
function className(query, element) {
    // Assume array.
    const value = element.properties.className || emptyClassNames;
    return value.includes(query.name);
}
}}),
"[project]/node_modules/hast-util-select/lib/id.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstId} from 'css-selector-parser'
 * @import {Element} from 'hast'
 */ /**
 * Check whether an element has an ID.
 *
 * @param {AstId} query
 *   AST rule (with `ids`).
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ __turbopack_context__.s({
    "id": (()=>id)
});
function id(query, element) {
    return element.properties.id === query.name;
}
}}),
"[project]/node_modules/hast-util-select/lib/name.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstTagName} from 'css-selector-parser'
 * @import {Element} from 'hast'
 */ /**
 * Check whether an element has a tag name.
 *
 * @param {AstTagName} query
 *   AST rule (with `tag`).
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ __turbopack_context__.s({
    "name": (()=>name)
});
function name(query, element) {
    return query.name === element.tagName;
}
}}),
"[project]/node_modules/hast-util-select/lib/pseudo.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstPseudoClass} from 'css-selector-parser'
 * @import {default as NthCheck} from 'nth-check'
 * @import {ElementContent, Element, Parents} from 'hast'
 * @import {State} from './index.js'
 */ __turbopack_context__.s({
    "pseudo": (()=>pseudo)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bcp$2d$47$2d$match$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/bcp-47-match/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/comma-separated-tokens/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/devlop/lib/development.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-has-property/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-whitespace/lib/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nth$2d$check$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/nth-check/lib/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nth$2d$check$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/nth-check/lib/esm/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zwitch/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/walk.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
/** @type {NthCheck} */ // @ts-expect-error: types are broken.
const nthCheck = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nth$2d$check$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"].default || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nth$2d$check$2f$lib$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"];
const pseudo = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zwitch$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zwitch"])('name', {
    handlers: {
        'any-link': anyLink,
        blank,
        checked,
        dir,
        disabled,
        empty,
        enabled,
        'first-child': firstChild,
        'first-of-type': firstOfType,
        has,
        is,
        lang,
        'last-child': lastChild,
        'last-of-type': lastOfType,
        not,
        'nth-child': nthChild,
        'nth-last-child': nthLastChild,
        'nth-last-of-type': nthLastOfType,
        'nth-of-type': nthOfType,
        'only-child': onlyChild,
        'only-of-type': onlyOfType,
        optional,
        'read-only': readOnly,
        'read-write': readWrite,
        required,
        root,
        scope
    },
    invalid: invalidPseudo,
    unknown: unknownPseudo
});
/**
 * Check whether an element matches an `:any-link` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function anyLink(_, element) {
    return (element.tagName === 'a' || element.tagName === 'area' || element.tagName === 'link') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'href');
}
/**
 * @param {State} state
 *   State.
 * @param {AstPseudoClass} query
 *   Query.
 */ function assertDeep(state, query) {
    if (state.shallow) {
        throw new Error('Cannot use `:' + query.name + '` without parent');
    }
}
/**
 * Check whether an element matches a `:blank` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function blank(_, element) {
    return !someChildren(element, check);
    "TURBOPACK unreachable";
    /**
   * @param {ElementContent} child
   * @returns {boolean}
   */ function check(child) {
        return child.type === 'element' || child.type === 'text' && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$whitespace$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespace"])(child);
    }
}
/**
 * Check whether an element matches a `:checked` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function checked(_, element) {
    if (element.tagName === 'input' || element.tagName === 'menuitem') {
        return Boolean((element.properties.type === 'checkbox' || element.properties.type === 'radio') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'checked'));
    }
    if (element.tagName === 'option') {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'selected');
    }
    return false;
}
/**
 * Check whether an element matches a `:dir()` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ // eslint-disable-next-line unicorn/prevent-abbreviations
function dir(query, _1, _2, _3, state) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument, 'expected `argument`');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument.type === 'String', 'expected plain text');
    return state.direction === query.argument.value;
}
/**
 * Check whether an element matches a `:disabled` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function disabled(_, element) {
    return (element.tagName === 'button' || element.tagName === 'input' || element.tagName === 'select' || element.tagName === 'textarea' || element.tagName === 'optgroup' || element.tagName === 'option' || element.tagName === 'menuitem' || element.tagName === 'fieldset') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'disabled');
}
/**
 * Check whether an element matches an `:empty` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function empty(_, element) {
    return !someChildren(element, check);
    "TURBOPACK unreachable";
    /**
   * @param {ElementContent} child
   * @returns {boolean}
   */ function check(child) {
        return child.type === 'element' || child.type === 'text';
    }
}
/**
 * Check whether an element matches an `:enabled` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function enabled(query, element) {
    return !disabled(query, element);
}
/**
 * Check whether an element matches a `:first-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function firstChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.elementIndex === 0;
}
/**
 * Check whether an element matches a `:first-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function firstOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.typeIndex === 0;
}
/**
 * @param {AstPseudoClass} query
 *   Query.
 * @returns {(value: number) => boolean}
 *   N.
 */ function getCachedNthCheck(query) {
    /** @type {(value: number) => boolean} */ // @ts-expect-error: cache.
    let cachedFunction = query._cachedFn;
    if (!cachedFunction) {
        const value = query.argument;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(value, 'expected `argument`');
        if (value.type !== 'Formula') {
            throw new Error('Expected `nth` formula, such as `even` or `2n+1` (`of` is not yet supported)');
        }
        cachedFunction = nthCheck(value.a + 'n+' + value.b);
        // @ts-expect-error: cache.
        query._cachedFn = cachedFunction;
    }
    return cachedFunction;
}
/**
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function has(query, element, _1, _2, state) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument, 'expected `argument`');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument.type === 'Selector', 'expected selector');
    /** @type {State} */ const childState = {
        ...state,
        // Not found yet.
        found: false,
        // One result is enough.
        one: true,
        results: [],
        rootQuery: query.argument,
        scopeElements: [
            element
        ],
        // Do walk deep.
        shallow: false
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walk"])(childState, {
        type: 'root',
        children: element.children
    });
    return childState.results.length > 0;
}
// Shouldn’t be called, parser gives correct data.
/* c8 ignore next 3 */ function invalidPseudo() {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unreachable"])('Invalid pseudo-selector');
}
/**
 * Check whether an element `:is` further selectors.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function is(query, element, _1, _2, state) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument, 'expected `argument`');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument.type === 'Selector', 'expected selector');
    /** @type {State} */ const childState = {
        ...state,
        // Not found yet.
        found: false,
        // One result is enough.
        one: true,
        results: [],
        rootQuery: query.argument,
        scopeElements: [
            element
        ],
        // Do walk deep.
        shallow: false
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walk"])(childState, element);
    return childState.results[0] === element;
}
/**
 * Check whether an element matches a `:lang()` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function lang(query, _1, _2, _3, state) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument, 'expected `argument`');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$devlop$2f$lib$2f$development$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ok"])(query.argument.type === 'String', 'expected string');
    return state.language !== '' && state.language !== undefined && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bcp$2d$47$2d$match$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extendedFilter"])(state.language, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$comma$2d$separated$2d$tokens$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"])(query.argument.value)).length > 0;
}
/**
 * Check whether an element matches a `:last-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function lastChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return Boolean(state.elementCount && state.elementIndex === state.elementCount - 1);
}
/**
 * Check whether an element matches a `:last-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function lastOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return typeof state.typeIndex === 'number' && typeof state.typeCount === 'number' && state.typeIndex === state.typeCount - 1;
}
/**
 * Check whether an element does `:not` match further selectors.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} index
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function not(query, element, index, parent, state) {
    return !is(query, element, index, parent, state);
}
/**
 * Check whether an element matches an `:nth-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function nthChild(query, _1, _2, _3, state) {
    const cachedFunction = getCachedNthCheck(query);
    assertDeep(state, query);
    return typeof state.elementIndex === 'number' && cachedFunction(state.elementIndex);
}
/**
 * Check whether an element matches an `:nth-last-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function nthLastChild(query, _1, _2, _3, state) {
    const cachedFunction = getCachedNthCheck(query);
    assertDeep(state, query);
    return Boolean(typeof state.elementCount === 'number' && typeof state.elementIndex === 'number' && cachedFunction(state.elementCount - state.elementIndex - 1));
}
/**
 * Check whether an element matches a `:nth-last-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function nthLastOfType(query, _1, _2, _3, state) {
    const cachedFunction = getCachedNthCheck(query);
    assertDeep(state, query);
    return typeof state.typeCount === 'number' && typeof state.typeIndex === 'number' && cachedFunction(state.typeCount - 1 - state.typeIndex);
}
/**
 * Check whether an element matches an `:nth-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function nthOfType(query, _1, _2, _3, state) {
    const cachedFunction = getCachedNthCheck(query);
    assertDeep(state, query);
    return typeof state.typeIndex === 'number' && cachedFunction(state.typeIndex);
}
/**
 * Check whether an element matches an `:only-child` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function onlyChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.elementCount === 1;
}
/**
 * Check whether an element matches an `:only-of-type` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} _1
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function onlyOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.typeCount === 1;
}
/**
 * Check whether an element matches an `:optional` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function optional(query, element) {
    return !required(query, element);
}
/**
 * Check whether an element matches a `:read-only` pseudo.
 *
 * @param {AstPseudoClass} query
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} index
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function readOnly(query, element, index, parent, state) {
    return !readWrite(query, element, index, parent, state);
}
/**
 * Check whether an element matches a `:read-write` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _1
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _2
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function readWrite(_, element, _1, _2, state) {
    return element.tagName === 'input' || element.tagName === 'textarea' ? !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'readOnly') && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'disabled') : Boolean(state.editableOrEditingHost);
}
/**
 * Check whether an element matches a `:required` pseudo.
 *
 * @param {AstPseudoClass} _
 *   Query.
 * @param {Element} element
 *   Element.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function required(_, element) {
    return (element.tagName === 'input' || element.tagName === 'textarea' || element.tagName === 'select') && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$has$2d$property$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasProperty"])(element, 'required');
}
/**
 * Check whether an element matches a `:root` pseudo.
 *
 * @param {AstPseudoClass} _1
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function root(_1, element, _2, parent, state) {
    return Boolean((!parent || parent.type === 'root') && state.schema && (state.schema.space === 'html' || state.schema.space === 'svg') && (element.tagName === 'html' || element.tagName === 'svg'));
}
/**
 * Check whether an element matches a `:scope` pseudo.
 *
 * @param {AstPseudoClass} _1
 *   Query.
 * @param {Element} element
 *   Element.
 * @param {number | undefined} _2
 *   Index of `element` in `parent`.
 * @param {Parents | undefined} _3
 *   Parent of `element`.
 * @param {State} state
 *   State.
 * @returns {boolean}
 *   Whether `element` matches `query`.
 */ function scope(_1, element, _2, _3, state) {
    return state.scopeElements.includes(element);
}
/**
 * Check children.
 *
 * @param {Element} element
 *   Element.
 * @param {(child: ElementContent) => boolean} check
 *   Check.
 * @returns {boolean}
 *   Whether a child of `element` matches `check`.
 */ function someChildren(element, check) {
    const children = element.children;
    let index = -1;
    while(++index < children.length){
        if (check(children[index])) return true;
    }
    return false;
}
/**
 * @param {unknown} query_
 *   Query-like value.
 * @returns {never}
 *   Nothing.
 * @throws
 *   Exception.
 */ function unknownPseudo(query_) {
    // Runtime JS guarantees it has a `name`.
    const query = query_;
    throw new Error('Unknown pseudo-selector `' + query.name + '`');
}
}}),
"[project]/node_modules/hast-util-select/lib/test.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstRule} from 'css-selector-parser'
 * @import {Element, Parents} from 'hast'
 * @import {State} from './index.js'
 */ __turbopack_context__.s({
    "test": (()=>test)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$attribute$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/attribute.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$class$2d$name$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/class-name.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/id.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$name$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/name.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$pseudo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/pseudo.js [app-client] (ecmascript)");
;
;
;
;
;
function test(query, element, index, parent, state) {
    for (const item of query.items){
        // eslint-disable-next-line unicorn/prefer-switch
        if (item.type === 'Attribute') {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$attribute$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["attribute"])(item, element, state.schema)) return false;
        } else if (item.type === 'Id') {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["id"])(item, element)) return false;
        } else if (item.type === 'ClassName') {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$class$2d$name$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["className"])(item, element)) return false;
        } else if (item.type === 'PseudoClass') {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$pseudo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pseudo"])(item, element, index, parent, state)) return false;
        } else if (item.type === 'PseudoElement') {
            throw new Error('Invalid selector: `::' + item.name + '`');
        } else if (item.type === 'TagName') {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$name$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["name"])(item, element)) return false;
        } else {
        // Otherwise `item.type` is `WildcardTag`, which matches.
        }
    }
    return true;
}
}}),
"[project]/node_modules/hast-util-select/lib/walk.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstRule} from 'css-selector-parser'
 * @import {Element, Nodes, Parents} from 'hast'
 * @import {State} from './index.js'
 */ /**
 * @typedef Counts
 *   Info on elements in a parent.
 * @property {number} count
 *   Number of elements.
 * @property {Map<string, number>} types
 *   Number of elements by tag name.
 *
 * @typedef Nest
 *   Rule sets by nesting.
 * @property {Array<AstRule> | undefined} adjacentSibling
 *   `a + b`
 * @property {Array<AstRule> | undefined} descendant
 *   `a b`
 * @property {Array<AstRule> | undefined} directChild
 *   `a > b`
 * @property {Array<AstRule> | undefined} generalSibling
 *   `a ~ b`
 */ __turbopack_context__.s({
    "walk": (()=>walk)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$enter$2d$state$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/enter-state.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$test$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/test.js [app-client] (ecmascript)");
;
;
/** @type {Array<never>} */ const empty = [];
function walk(state, tree) {
    if (tree) {
        one(state, [], tree, undefined, undefined, tree);
    }
}
/**
 * Add a rule to a nesting map.
 *
 * @param {Nest} nest
 *   Nesting.
 * @param {keyof Nest} field
 *   Field.
 * @param {AstRule} rule
 *   Rule.
 */ function add(nest, field, rule) {
    const list = nest[field];
    if (list) {
        list.push(rule);
    } else {
        nest[field] = [
            rule
        ];
    }
}
/**
 * Check in a parent.
 *
 * @param {State} state
 *   State.
 * @param {Nest} nest
 *   Nesting.
 * @param {Parents} node
 *   Parent.
 * @param {Nodes} tree
 *   Tree.
 * @returns {undefined}
 *   Nothing.
 */ function all(state, nest, node, tree) {
    const fromParent = combine(nest.descendant, nest.directChild);
    /** @type {Array<AstRule> | undefined} */ let fromSibling;
    let index = -1;
    /**
   * Total counts.
   * @type {Counts}
   */ const total = {
        count: 0,
        types: new Map()
    };
    /**
   * Counts of previous siblings.
   * @type {Counts}
   */ const before = {
        count: 0,
        types: new Map()
    };
    while(++index < node.children.length){
        count(total, node.children[index]);
    }
    index = -1;
    while(++index < node.children.length){
        const child = node.children[index];
        // Uppercase to prevent prototype polution, injecting `constructor` or so.
        // Normalize because HTML is insensitive.
        const name = child.type === 'element' ? child.tagName.toUpperCase() : undefined;
        // Before counting further elements:
        state.elementIndex = before.count;
        state.typeIndex = name ? before.types.get(name) || 0 : 0;
        // After counting all elements.
        state.elementCount = total.count;
        state.typeCount = name ? total.types.get(name) : 0;
        // Only apply if this is a parent, this should be an element, but we check
        // for parents so that we delve into custom nodes too.
        if ('children' in child) {
            const forSibling = combine(fromParent, fromSibling);
            const nest = one(state, forSibling, node.children[index], index, node, tree);
            fromSibling = combine(nest.generalSibling, nest.adjacentSibling);
        }
        // We found one thing, and one is enough.
        if (state.one && state.found) {
            break;
        }
        count(before, node.children[index]);
    }
}
/**
 * Apply selectors to an element.
 *
 * @param {State} state
 *   Current state.
 * @param {Array<AstRule>} rules
 *   Rules to apply.
 * @param {Element} node
 *   Element to apply rules to.
 * @param {number | undefined} index
 *   Index of `node` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @returns {Nest}
 *   Further rules.
 */ function applySelectors(state, rules, node, index, parent) {
    /** @type {Nest} */ const nestResult = {
        adjacentSibling: undefined,
        descendant: undefined,
        directChild: undefined,
        generalSibling: undefined
    };
    let selectorIndex = -1;
    while(++selectorIndex < rules.length){
        const rule = rules[selectorIndex];
        // We found one thing, and one is enough.
        if (state.one && state.found) {
            break;
        }
        // When shallow, we don’t allow nested rules.
        // Idea: we could allow a stack of parents?
        // Might get quite complex though.
        if (state.shallow && rule.nestedRule) {
            throw new Error('Expected selector without nesting');
        }
        // If this rule matches:
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$test$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["test"])(rule, node, index, parent, state)) {
            const nest = rule.nestedRule;
            // Are there more?
            if (nest) {
                /** @type {keyof Nest} */ const label = nest.combinator === '+' ? 'adjacentSibling' : nest.combinator === '~' ? 'generalSibling' : nest.combinator === '>' ? 'directChild' : 'descendant';
                add(nestResult, label, nest);
            } else {
                // We have a match!
                state.found = true;
                if (!state.results.includes(node)) {
                    state.results.push(node);
                }
            }
        }
        // Descendant.
        if (rule.combinator === undefined) {
            add(nestResult, 'descendant', rule);
        } else if (rule.combinator === '~') {
            add(nestResult, 'generalSibling', rule);
        }
    // Drop direct child (`>`), adjacent sibling (`+`).
    }
    return nestResult;
}
/**
 * Combine two lists, if needed.
 *
 * This is optimized to create as few lists as possible.
 *
 * @param {Array<AstRule> | undefined} left
 *   Rules.
 * @param {Array<AstRule> | undefined} right
 *   Rules.
 * @returns {Array<AstRule>}
 *   Rules.
 */ function combine(left, right) {
    return left && right && left.length > 0 && right.length > 0 ? [
        ...left,
        ...right
    ] : left && left.length > 0 ? left : right && right.length > 0 ? right : empty;
}
/**
 * Count a node.
 *
 * @param {Counts} counts
 *   Counts.
 * @param {Nodes} node
 *   Node (we’re looking for elements).
 * @returns {undefined}
 *   Nothing.
 */ function count(counts, node) {
    if (node.type === 'element') {
        // Uppercase to prevent prototype polution, injecting `constructor` or so.
        // Normalize because HTML is insensitive.
        const name = node.tagName.toUpperCase();
        const count = (counts.types.get(name) || 0) + 1;
        counts.count++;
        counts.types.set(name, count);
    }
}
/**
 * Check a node.
 *
 * @param {State} state
 *   State.
 * @param {Array<AstRule>} currentRules
 *   Rules.
 * @param {Nodes} node
 *   Node.
 * @param {number | undefined} index
 *   Index of `node` in `parent`.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @param {Nodes} tree
 *   Tree.
 * @returns {Nest}
 *   Nesting.
 */ function one(state, currentRules, node, index, parent, tree) {
    /** @type {Nest} */ let nestResult = {
        adjacentSibling: undefined,
        descendant: undefined,
        directChild: undefined,
        generalSibling: undefined
    };
    const exit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$enter$2d$state$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enterState"])(state, node);
    if (node.type === 'element') {
        let rootRules = state.rootQuery.rules;
        // Remove direct child rules if this is the root.
        // This only happens for a `:has()` rule, which can be like
        // `a:has(> b)`.
        if (parent && parent !== tree) {
            rootRules = state.rootQuery.rules.filter((d)=>d.combinator === undefined || d.combinator === '>' && parent === tree);
        }
        nestResult = applySelectors(state, // Try the root rules for this element too.
        combine(currentRules, rootRules), node, index, parent);
    }
    // If this is a parent, and we want to delve into them, and we haven’t found
    // our single result yet.
    if ('children' in node && !state.shallow && !(state.one && state.found)) {
        all(state, nestResult, node, tree);
    }
    exit();
    return nestResult;
}
}}),
"[project]/node_modules/hast-util-select/lib/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @import {AstSelector} from 'css-selector-parser'
 * @import {Element, Nodes, RootContent} from 'hast'
 * @import {Schema} from 'property-information'
 */ /**
 * @typedef {'html' | 'svg'} Space
 *   Name of namespace.
 *
 * @typedef {'auto' | 'ltr' | 'rtl'} Direction
 *   Direction.
 *
 * @typedef State
 *   Current state.
 * @property {Direction} direction
 *   Current direction.
 * @property {boolean} editableOrEditingHost
 *   Whether we’re in `contentEditable`.
 * @property {number | undefined} elementCount
 *   Track siblings: there are `n` siblings.
 * @property {number | undefined} elementIndex
 *   Track siblings: this current element has `n` elements before it.
 * @property {boolean} found
 *   Whether we found at least one match.
 * @property {string | undefined} language
 *   Current language.
 * @property {boolean} one
 *   Whether we can stop looking after we found one element.
 * @property {Array<Element>} results
 *   Matches.
 * @property {AstSelector} rootQuery
 *   Original root selectors.
 * @property {Schema} schema
 *   Current schema.
 * @property {Array<RootContent>} scopeElements
 *   Elements in scope.
 * @property {boolean} shallow
 *   Whether we only allow selectors without nesting.
 * @property {number | undefined} typeCount
 *   Track siblings: there are `n` siblings with this element’s tag name.
 * @property {number | undefined} typeIndex
 *   Track siblings: this current element has `n` elements with its tag name
 *   before it.
 */ __turbopack_context__.s({
    "matches": (()=>matches),
    "select": (()=>select),
    "selectAll": (()=>selectAll)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/node_modules/property-information/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/parse.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/hast-util-select/lib/walk.js [app-client] (ecmascript)");
;
;
;
function matches(selector, node, space) {
    const state = createState(selector, node, space);
    state.one = true;
    state.shallow = true;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walk"])(state, node || undefined);
    return state.results.length > 0;
}
function select(selector, tree, space) {
    const state = createState(selector, tree, space);
    state.one = true;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walk"])(state, tree || undefined);
    return state.results[0];
}
function selectAll(selector, tree, space) {
    const state = createState(selector, tree, space);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$walk$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["walk"])(state, tree || undefined);
    return state.results;
}
/**
 * @param {string} selector
 *   CSS selector, such as (`h1`, `a, b`).
 * @param {Nodes | null | undefined} [tree]
 *   Tree to search (optional).
 * @param {Space | null | undefined} [space='html']
 *   Name of namespace (default: `'html'`).
 * @returns {State} State
 *   State.
 */ function createState(selector, tree, space) {
    return {
        direction: 'ltr',
        editableOrEditingHost: false,
        elementCount: undefined,
        elementIndex: undefined,
        found: false,
        language: undefined,
        one: false,
        // State of the query.
        results: [],
        rootQuery: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$lib$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parse"])(selector),
        schema: space === 'svg' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["svg"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$hast$2d$util$2d$select$2f$node_modules$2f$property$2d$information$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["html"],
        scopeElements: tree ? tree.type === 'root' ? tree.children : [
            tree
        ] : [],
        shallow: false,
        typeIndex: undefined,
        typeCount: undefined
    };
}
}}),
}]);

//# sourceMappingURL=node_modules_hast-util-select_ad272117._.js.map